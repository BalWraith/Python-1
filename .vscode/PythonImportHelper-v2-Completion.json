[
    {
        "label": "os;",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os;",
        "description": "os;",
        "detail": "os;",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "TextIOWrapper",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "skipUnless",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "main",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "skipUnless",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "contextlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "contextlib",
        "description": "contextlib",
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "contextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "M",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "fixpath",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "fixpath",
        "description": "fixpath",
        "detail": "fixpath",
        "documentation": {}
    },
    {
        "label": "colorama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "colorama",
        "description": "colorama",
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "just_fix_windows_console",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "just_fix_windows_console",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "AnsiToWin32",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Cursor",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "colorama_text",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Fore",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Back",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "Style",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "colorama",
        "description": "colorama",
        "isExtraImport": true,
        "detail": "colorama",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "choice",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "printable",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "argparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "argparse",
        "description": "argparse",
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "normpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "os;os.system('cls')",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os;os.system('cls')",
        "description": "os;os.system('cls')",
        "detail": "os;os.system('cls')",
        "documentation": {}
    },
    {
        "label": "os,random;os.system('cls')",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.random;os.system('cls')",
        "description": "os.random;os.system('cls')",
        "detail": "os.random;os.system('cls')",
        "documentation": {}
    },
    {
        "label": "tkinter",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter",
        "description": "tkinter",
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "tkinter.dnd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tkinter.dnd",
        "description": "tkinter.dnd",
        "detail": "tkinter.dnd",
        "documentation": {}
    },
    {
        "label": "os;os.system(\"cls\")",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os;os.system(\"cls\")",
        "description": "os;os.system(\"cls\")",
        "detail": "os;os.system(\"cls\")",
        "documentation": {}
    },
    {
        "label": "os;os.system(\"cls\");",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os;os.system(\"cls\");",
        "description": "os;os.system(\"cls\");",
        "detail": "os;os.system(\"cls\");",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "random,os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random.os",
        "description": "random.os",
        "detail": "random.os",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "random,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random.",
        "description": "random.",
        "detail": "random.",
        "documentation": {}
    },
    {
        "label": "valid_ident",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "albums",
        "importPath": "nested_data",
        "description": "nested_data",
        "isExtraImport": true,
        "detail": "nested_data",
        "documentation": {}
    },
    {
        "label": "timeit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "timeit",
        "description": "timeit",
        "detail": "timeit",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.app1.app",
        "description": "Ardit_Sulce_python.app1.app",
        "peekOfCode": "f = open(\"Ardit_Sulce_python/todos.txt\", \"a\")\nf.writelines([\"see you soon!\", \"Over and out.\"])\nf.close\nf = open(\"Ardit_Sulce_python/todos.txt\", \"r\")\nprint(f.read())",
        "detail": "Ardit_Sulce_python.app1.app",
        "documentation": {}
    },
    {
        "label": "f",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.app1.app",
        "description": "Ardit_Sulce_python.app1.app",
        "peekOfCode": "f = open(\"Ardit_Sulce_python/todos.txt\", \"r\")\nprint(f.read())",
        "detail": "Ardit_Sulce_python.app1.app",
        "documentation": {}
    },
    {
        "label": "todos",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.app1.mytodo",
        "description": "Ardit_Sulce_python.app1.mytodo",
        "peekOfCode": "todos = [];import os; os.system('cls')\ntxt = \"Ardit_Sulce_python/todos.txt\"\nwhile True:\n    ## Get user input and strip space chars from it\n    user_action = input(\"Type add, show, edit, complete: \")\n    user_action = user_action.strip()\n    match user_action:\n        ## Add to the todos list \n        case 'add':\n           #Runs until you enter exit",
        "detail": "Ardit_Sulce_python.app1.mytodo",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.app1.mytodo",
        "description": "Ardit_Sulce_python.app1.mytodo",
        "peekOfCode": "txt = \"Ardit_Sulce_python/todos.txt\"\nwhile True:\n    ## Get user input and strip space chars from it\n    user_action = input(\"Type add, show, edit, complete: \")\n    user_action = user_action.strip()\n    match user_action:\n        ## Add to the todos list \n        case 'add':\n           #Runs until you enter exit\n           while \"exit\" != True:",
        "detail": "Ardit_Sulce_python.app1.mytodo",
        "documentation": {}
    },
    {
        "label": "contents",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus",
        "description": "Ardit_Sulce_python.bonus.bonus",
        "peekOfCode": "contents = [\"All carrots are to be sliced longitudinally.\", \"The carrots were reportedly sliced.\", \"The slicing process was well presented.\"]\nfilenames = [\"doc.txt\", \"report.txt\", \"presentation.txt\"]\nfor content, filename in zip(contents, filenames):\n    file = open(f\"files/{filename}\", 'w')\n    file.write(content)",
        "detail": "Ardit_Sulce_python.bonus.bonus",
        "documentation": {}
    },
    {
        "label": "filenames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus",
        "description": "Ardit_Sulce_python.bonus.bonus",
        "peekOfCode": "filenames = [\"doc.txt\", \"report.txt\", \"presentation.txt\"]\nfor content, filename in zip(contents, filenames):\n    file = open(f\"files/{filename}\", 'w')\n    file.write(content)",
        "detail": "Ardit_Sulce_python.bonus.bonus",
        "documentation": {}
    },
    {
        "label": "filenames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus04",
        "description": "Ardit_Sulce_python.bonus.bonus04",
        "peekOfCode": "filenames = [\"1.Raw Data.txt\", \"2.Reports.txt\", \"3.Presentations.txt\"]\nfor filename in filenames:\n    print(\" \")",
        "detail": "Ardit_Sulce_python.bonus.bonus04",
        "documentation": {}
    },
    {
        "label": "text",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus1",
        "description": "Ardit_Sulce_python.bonus.bonus1",
        "peekOfCode": "text = input(\"Enter a title: \")\nlength = len(text)\nprint(\"The length of the title:\", length)",
        "detail": "Ardit_Sulce_python.bonus.bonus1",
        "documentation": {}
    },
    {
        "label": "length",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus1",
        "description": "Ardit_Sulce_python.bonus.bonus1",
        "peekOfCode": "length = len(text)\nprint(\"The length of the title:\", length)",
        "detail": "Ardit_Sulce_python.bonus.bonus1",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus2.2",
        "description": "Ardit_Sulce_python.bonus.bonus2.2",
        "peekOfCode": "x = 1\nwhile x <= 6:\n    print(x)\n    x = x + 1",
        "detail": "Ardit_Sulce_python.bonus.bonus2.2",
        "documentation": {}
    },
    {
        "label": "meals",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus3",
        "description": "Ardit_Sulce_python.bonus.bonus3",
        "peekOfCode": "meals = ['pasta', 'pizza', 'salad'] ;import os;os.system('cls')\nfor meal in 'meals':\n    print(meal.capitalize())\nprint(\"Bye\")\nprint(\"\\n\"*5)",
        "detail": "Ardit_Sulce_python.bonus.bonus3",
        "documentation": {}
    },
    {
        "label": "filenames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus4",
        "description": "Ardit_Sulce_python.bonus.bonus4",
        "peekOfCode": "filenames = [\"1.Raw Data.txt\", \"2.Reports.txt\", \"3.Presentations.txt\"];import os;os.system('cls')\nfor filename in filenames:\n    filename = filename.replace(\".\" , \"-\")\n    print(filename)\nprint(filenames)\nseconds = [1.23, 1.45, 1.02]\ncurrent = 1.11\nseconds.append(current)\nprint(seconds)",
        "detail": "Ardit_Sulce_python.bonus.bonus4",
        "documentation": {}
    },
    {
        "label": "seconds",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus4",
        "description": "Ardit_Sulce_python.bonus.bonus4",
        "peekOfCode": "seconds = [1.23, 1.45, 1.02]\ncurrent = 1.11\nseconds.append(current)\nprint(seconds)",
        "detail": "Ardit_Sulce_python.bonus.bonus4",
        "documentation": {}
    },
    {
        "label": "current",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus4",
        "description": "Ardit_Sulce_python.bonus.bonus4",
        "peekOfCode": "current = 1.11\nseconds.append(current)\nprint(seconds)",
        "detail": "Ardit_Sulce_python.bonus.bonus4",
        "documentation": {}
    },
    {
        "label": "waiting_list",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus5",
        "description": "Ardit_Sulce_python.bonus.bonus5",
        "peekOfCode": "waiting_list = [\"sen\", \"ben\", \"john\"];import os;os.system('cls')\nwaiting_list.sort() \nfor index,list in enumerate(waiting_list):\n    print(f\"{index + 1}. {list.title()}\")",
        "detail": "Ardit_Sulce_python.bonus.bonus5",
        "documentation": {}
    },
    {
        "label": "contents",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus6",
        "description": "Ardit_Sulce_python.bonus.bonus6",
        "peekOfCode": "contents = [\"All carrots are to be sliced longitudinally.\",\n            \"The carrots were reportedly sliced.\",\n            \"The slicing process was well presented.\"]\nfilenames = [\"doc.txt\",\n             \"report.txt\",\n             \"presentation.txt\"]\nfor content, filename in zip(contents, filenames):\n    file = open(f\"../files/{filename}\", \"w\")\n    file.write(content)\na = \"I am a string \" \\",
        "detail": "Ardit_Sulce_python.bonus.bonus6",
        "documentation": {}
    },
    {
        "label": "filenames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus6",
        "description": "Ardit_Sulce_python.bonus.bonus6",
        "peekOfCode": "filenames = [\"doc.txt\",\n             \"report.txt\",\n             \"presentation.txt\"]\nfor content, filename in zip(contents, filenames):\n    file = open(f\"../files/{filename}\", \"w\")\n    file.write(content)\na = \"I am a string \" \\\n    \"on my \" \\\n     \"own\"",
        "detail": "Ardit_Sulce_python.bonus.bonus6",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus6",
        "description": "Ardit_Sulce_python.bonus.bonus6",
        "peekOfCode": "a = \"I am a string \" \\\n    \"on my \" \\\n     \"own\"",
        "detail": "Ardit_Sulce_python.bonus.bonus6",
        "documentation": {}
    },
    {
        "label": "filenames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "filenames = [\"1.doc\", \"1.report\", \"1.presentation\"];import os;os.system('cls')\n## replaces . with - and adds .txt to the end \nfilenames = [filename.replace('.','-') + '.txt' for filename in filenames]\nprint(filenames)\n## LIST COMPREHENSION CHALLENGE\nnames = [\"john smith\", \"jay santi\", \"eva kuki\"]\n## Caps the first letter is each word of this list\nnames = [name.replace(name,name.title()) for name in names  ]\nprint(names)\n## Counts each char in the string",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "filenames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "filenames = [filename.replace('.','-') + '.txt' for filename in filenames]\nprint(filenames)\n## LIST COMPREHENSION CHALLENGE\nnames = [\"john smith\", \"jay santi\", \"eva kuki\"]\n## Caps the first letter is each word of this list\nnames = [name.replace(name,name.title()) for name in names  ]\nprint(names)\n## Counts each char in the string\nusernames = [\"john 1991\", \"alberta1970\", \"magnola2000\"]\nusernames = [len(username) for username in usernames]",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "names = [\"john smith\", \"jay santi\", \"eva kuki\"]\n## Caps the first letter is each word of this list\nnames = [name.replace(name,name.title()) for name in names  ]\nprint(names)\n## Counts each char in the string\nusernames = [\"john 1991\", \"alberta1970\", \"magnola2000\"]\nusernames = [len(username) for username in usernames]\nprint(usernames)\n## Turns each string into a float\nuser_entries = ['10', '19.1', '20']",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "names = [name.replace(name,name.title()) for name in names  ]\nprint(names)\n## Counts each char in the string\nusernames = [\"john 1991\", \"alberta1970\", \"magnola2000\"]\nusernames = [len(username) for username in usernames]\nprint(usernames)\n## Turns each string into a float\nuser_entries = ['10', '19.1', '20']\nuser_entries = [float(user) for user in user_entries]\nprint(user_entries)",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "usernames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "usernames = [\"john 1991\", \"alberta1970\", \"magnola2000\"]\nusernames = [len(username) for username in usernames]\nprint(usernames)\n## Turns each string into a float\nuser_entries = ['10', '19.1', '20']\nuser_entries = [float(user) for user in user_entries]\nprint(user_entries)\n## Takes each num and multiply it by 2\nnumbers = [10, 20, 30]\nnumbers = [num*2 for num in numbers]",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "usernames",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "usernames = [len(username) for username in usernames]\nprint(usernames)\n## Turns each string into a float\nuser_entries = ['10', '19.1', '20']\nuser_entries = [float(user) for user in user_entries]\nprint(user_entries)\n## Takes each num and multiply it by 2\nnumbers = [10, 20, 30]\nnumbers = [num*2 for num in numbers]\nprint(numbers)",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "user_entries",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "user_entries = ['10', '19.1', '20']\nuser_entries = [float(user) for user in user_entries]\nprint(user_entries)\n## Takes each num and multiply it by 2\nnumbers = [10, 20, 30]\nnumbers = [num*2 for num in numbers]\nprint(numbers)\n## Turns the nums in the string to a float and adds them together \nuser_input = ['10', '19.1' , '20']\nuser_input = [float(user) for user in user_input]",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "user_entries",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "user_entries = [float(user) for user in user_entries]\nprint(user_entries)\n## Takes each num and multiply it by 2\nnumbers = [10, 20, 30]\nnumbers = [num*2 for num in numbers]\nprint(numbers)\n## Turns the nums in the string to a float and adds them together \nuser_input = ['10', '19.1' , '20']\nuser_input = [float(user) for user in user_input]\nprint(sum(user_input))",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "numbers = [10, 20, 30]\nnumbers = [num*2 for num in numbers]\nprint(numbers)\n## Turns the nums in the string to a float and adds them together \nuser_input = ['10', '19.1' , '20']\nuser_input = [float(user) for user in user_input]\nprint(sum(user_input))",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "numbers = [num*2 for num in numbers]\nprint(numbers)\n## Turns the nums in the string to a float and adds them together \nuser_input = ['10', '19.1' , '20']\nuser_input = [float(user) for user in user_input]\nprint(sum(user_input))",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "user_input = ['10', '19.1' , '20']\nuser_input = [float(user) for user in user_input]\nprint(sum(user_input))",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "user_input",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus7",
        "description": "Ardit_Sulce_python.bonus.bonus7",
        "peekOfCode": "user_input = [float(user) for user in user_input]\nprint(sum(user_input))",
        "detail": "Ardit_Sulce_python.bonus.bonus7",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus8",
        "description": "Ardit_Sulce_python.bonus.bonus8",
        "peekOfCode": "date = input(\"Enter today's date: \")\nmood = input(\"How do you rate your mood today from 1 to 10? \")\nthoughts = input(\"Let your thoughts flow: \\n\")\n## makes a file in the journal folder with the name set to the date the users enters \nwith open(f\"Ardit_Sulce_python/journal/{date}.txt\", \"w\") as file:\n    ## wites the input variable mood and thoughts to the file \n    file.write(mood + '\\n' * 2 )\n    file.write(thoughts)",
        "detail": "Ardit_Sulce_python.bonus.bonus8",
        "documentation": {}
    },
    {
        "label": "mood",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus8",
        "description": "Ardit_Sulce_python.bonus.bonus8",
        "peekOfCode": "mood = input(\"How do you rate your mood today from 1 to 10? \")\nthoughts = input(\"Let your thoughts flow: \\n\")\n## makes a file in the journal folder with the name set to the date the users enters \nwith open(f\"Ardit_Sulce_python/journal/{date}.txt\", \"w\") as file:\n    ## wites the input variable mood and thoughts to the file \n    file.write(mood + '\\n' * 2 )\n    file.write(thoughts)",
        "detail": "Ardit_Sulce_python.bonus.bonus8",
        "documentation": {}
    },
    {
        "label": "thoughts",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.bonus8",
        "description": "Ardit_Sulce_python.bonus.bonus8",
        "peekOfCode": "thoughts = input(\"Let your thoughts flow: \\n\")\n## makes a file in the journal folder with the name set to the date the users enters \nwith open(f\"Ardit_Sulce_python/journal/{date}.txt\", \"w\") as file:\n    ## wites the input variable mood and thoughts to the file \n    file.write(mood + '\\n' * 2 )\n    file.write(thoughts)",
        "detail": "Ardit_Sulce_python.bonus.bonus8",
        "documentation": {}
    },
    {
        "label": "user_prompt",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.e2",
        "description": "Ardit_Sulce_python.bonus.e2",
        "peekOfCode": "user_prompt = \"Enter a todo:\"\ntodos = []\nwhile True:\n    todo = input(user_prompt)\n    print(todo.title())\n    todos.append(todo)",
        "detail": "Ardit_Sulce_python.bonus.e2",
        "documentation": {}
    },
    {
        "label": "todos",
        "kind": 5,
        "importPath": "Ardit_Sulce_python.bonus.e2",
        "description": "Ardit_Sulce_python.bonus.e2",
        "peekOfCode": "todos = []\nwhile True:\n    todo = input(user_prompt)\n    print(todo.title())\n    todos.append(todo)",
        "detail": "Ardit_Sulce_python.bonus.e2",
        "documentation": {}
    },
    {
        "label": "StreamWrapperTest",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansitowin32_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansitowin32_test",
        "peekOfCode": "class StreamWrapperTest(TestCase):\n    def testIsAProxy(self):\n        mockStream = Mock()\n        wrapper = StreamWrapper(mockStream, None)\n        self.assertTrue( wrapper.random_attr is mockStream.random_attr )\n    def testDelegatesWrite(self):\n        mockStream = Mock()\n        mockConverter = Mock()\n        wrapper = StreamWrapper(mockStream, mockConverter)\n        wrapper.write('hello')",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansitowin32_test",
        "documentation": {}
    },
    {
        "label": "AnsiToWin32Test",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansitowin32_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansitowin32_test",
        "peekOfCode": "class AnsiToWin32Test(TestCase):\n    def testInit(self):\n        mockStdout = Mock()\n        auto = Mock()\n        stream = AnsiToWin32(mockStdout, autoreset=auto)\n        self.assertEqual(stream.wrapped, mockStdout)\n        self.assertEqual(stream.autoreset, auto)\n    @patch('colorama.ansitowin32.winterm', None)\n    @patch('colorama.ansitowin32.winapi_test', lambda *_: True)\n    def testStripIsTrueOnWindows(self):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansitowin32_test",
        "documentation": {}
    },
    {
        "label": "AnsiTest",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "peekOfCode": "class AnsiTest(TestCase):\n    def setUp(self):\n        # sanity check: stdout should be a file or StringIO object.\n        # It will only be AnsiToWin32 if init() has previously wrapped it\n        self.assertNotEqual(type(sys.stdout), AnsiToWin32)\n        self.assertNotEqual(type(sys.stderr), AnsiToWin32)\n    def tearDown(self):\n        sys.stdout = stdout_orig\n        sys.stderr = stderr_orig\n    def testForeAttributes(self):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "documentation": {}
    },
    {
        "label": "stdout_orig",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "peekOfCode": "stdout_orig = sys.stdout\nstderr_orig = sys.stderr\nclass AnsiTest(TestCase):\n    def setUp(self):\n        # sanity check: stdout should be a file or StringIO object.\n        # It will only be AnsiToWin32 if init() has previously wrapped it\n        self.assertNotEqual(type(sys.stdout), AnsiToWin32)\n        self.assertNotEqual(type(sys.stderr), AnsiToWin32)\n    def tearDown(self):\n        sys.stdout = stdout_orig",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "documentation": {}
    },
    {
        "label": "stderr_orig",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "peekOfCode": "stderr_orig = sys.stderr\nclass AnsiTest(TestCase):\n    def setUp(self):\n        # sanity check: stdout should be a file or StringIO object.\n        # It will only be AnsiToWin32 if init() has previously wrapped it\n        self.assertNotEqual(type(sys.stdout), AnsiToWin32)\n        self.assertNotEqual(type(sys.stderr), AnsiToWin32)\n    def tearDown(self):\n        sys.stdout = stdout_orig\n        sys.stderr = stderr_orig",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.ansi_test",
        "documentation": {}
    },
    {
        "label": "InitTest",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "peekOfCode": "class InitTest(TestCase):\n    @skipUnless(sys.stdout.isatty(), \"sys.stdout is not a tty\")\n    def setUp(self):\n        # sanity check\n        self.assertNotWrapped()\n    def tearDown(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr\n    def assertWrapped(self):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "documentation": {}
    },
    {
        "label": "JustFixWindowsConsoleTest",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "peekOfCode": "class JustFixWindowsConsoleTest(TestCase):\n    def _reset(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr\n    def tearDown(self):\n        self._reset()\n    @patch(\"colorama.ansitowin32.winapi_test\", lambda: True)\n    def testJustFixWindowsConsole(self):\n        if sys.platform != \"win32\":",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "documentation": {}
    },
    {
        "label": "orig_stdout",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "peekOfCode": "orig_stdout = sys.stdout\norig_stderr = sys.stderr\nclass InitTest(TestCase):\n    @skipUnless(sys.stdout.isatty(), \"sys.stdout is not a tty\")\n    def setUp(self):\n        # sanity check\n        self.assertNotWrapped()\n    def tearDown(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "documentation": {}
    },
    {
        "label": "orig_stderr",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "peekOfCode": "orig_stderr = sys.stderr\nclass InitTest(TestCase):\n    @skipUnless(sys.stdout.isatty(), \"sys.stdout is not a tty\")\n    def setUp(self):\n        # sanity check\n        self.assertNotWrapped()\n    def tearDown(self):\n        _wipe_internal_state_for_tests()\n        sys.stdout = orig_stdout\n        sys.stderr = orig_stderr",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.initialise_test",
        "documentation": {}
    },
    {
        "label": "IsattyTest",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.isatty_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.isatty_test",
        "peekOfCode": "class IsattyTest(TestCase):\n    def test_TTY(self):\n        tty = StreamTTY()\n        self.assertTrue(is_a_tty(tty))\n        with pycharm():\n            self.assertTrue(is_a_tty(tty))\n    def test_nonTTY(self):\n        non_tty = StreamNonTTY()\n        self.assertFalse(is_a_tty(non_tty))\n        with pycharm():",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.isatty_test",
        "documentation": {}
    },
    {
        "label": "is_a_tty",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.isatty_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.isatty_test",
        "peekOfCode": "def is_a_tty(stream):\n    return StreamWrapper(stream, None).isatty()\nclass IsattyTest(TestCase):\n    def test_TTY(self):\n        tty = StreamTTY()\n        self.assertTrue(is_a_tty(tty))\n        with pycharm():\n            self.assertTrue(is_a_tty(tty))\n    def test_nonTTY(self):\n        non_tty = StreamNonTTY()",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.isatty_test",
        "documentation": {}
    },
    {
        "label": "StreamTTY",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "peekOfCode": "class StreamTTY(StringIO):\n    def isatty(self):\n        return True\nclass StreamNonTTY(StringIO):\n    def isatty(self):\n        return False\n@contextmanager\ndef osname(name):\n    orig = os.name\n    os.name = name",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "documentation": {}
    },
    {
        "label": "StreamNonTTY",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "peekOfCode": "class StreamNonTTY(StringIO):\n    def isatty(self):\n        return False\n@contextmanager\ndef osname(name):\n    orig = os.name\n    os.name = name\n    yield\n    os.name = orig\n@contextmanager",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "documentation": {}
    },
    {
        "label": "osname",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "peekOfCode": "def osname(name):\n    orig = os.name\n    os.name = name\n    yield\n    os.name = orig\n@contextmanager\ndef replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "documentation": {}
    },
    {
        "label": "replace_by",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "peekOfCode": "def replace_by(stream):\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    sys.stdout = stream\n    sys.stderr = stream\n    yield\n    sys.stdout = orig_stdout\n    sys.stderr = orig_stderr\n@contextmanager\ndef replace_original_by(stream):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "documentation": {}
    },
    {
        "label": "replace_original_by",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "peekOfCode": "def replace_original_by(stream):\n    orig_stdout = sys.__stdout__\n    orig_stderr = sys.__stderr__\n    sys.__stdout__ = stream\n    sys.__stderr__ = stream\n    yield\n    sys.__stdout__ = orig_stdout\n    sys.__stderr__ = orig_stderr\n@contextmanager\ndef pycharm():",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "documentation": {}
    },
    {
        "label": "pycharm",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "peekOfCode": "def pycharm():\n    os.environ[\"PYCHARM_HOSTED\"] = \"1\"\n    non_tty = StreamNonTTY()\n    with replace_by(non_tty), replace_original_by(non_tty):\n        yield\n    del os.environ[\"PYCHARM_HOSTED\"]",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.utils",
        "documentation": {}
    },
    {
        "label": "WinTermTest",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.tests.winterm_test",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.tests.winterm_test",
        "peekOfCode": "class WinTermTest(TestCase):\n    @patch('colorama.winterm.win32')\n    def testInit(self, mockWin32):\n        mockAttr = Mock()\n        mockAttr.wAttributes = 7 + 6 * 16 + 8\n        mockWin32.GetConsoleScreenBufferInfo.return_value = mockAttr\n        term = WinTerm()\n        self.assertEqual(term._fore, 7)\n        self.assertEqual(term._back, 6)\n        self.assertEqual(term._style, 8)",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.tests.winterm_test",
        "documentation": {}
    },
    {
        "label": "AnsiCodes",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "class AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same\n        # as the class attributes but wrapped with the ANSI escape sequence\n        for name in dir(self):\n            if not name.startswith('_'):\n                value = getattr(self, name)\n                setattr(self, name, code_to_chars(value))\nclass AnsiCursor(object):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiCursor",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "class AnsiCursor(object):\n    def UP(self, n=1):\n        return CSI + str(n) + 'A'\n    def DOWN(self, n=1):\n        return CSI + str(n) + 'B'\n    def FORWARD(self, n=1):\n        return CSI + str(n) + 'C'\n    def BACK(self, n=1):\n        return CSI + str(n) + 'D'\n    def POS(self, x=1, y=1):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiFore",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "class AnsiFore(AnsiCodes):\n    BLACK           = 30\n    RED             = 31\n    GREEN           = 32\n    YELLOW          = 33\n    BLUE            = 34\n    MAGENTA         = 35\n    CYAN            = 36\n    WHITE           = 37\n    RESET           = 39",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiBack",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "class AnsiBack(AnsiCodes):\n    BLACK           = 40\n    RED             = 41\n    GREEN           = 42\n    YELLOW          = 43\n    BLUE            = 44\n    MAGENTA         = 45\n    CYAN            = 46\n    WHITE           = 47\n    RESET           = 49",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "AnsiStyle",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "class AnsiStyle(AnsiCodes):\n    BRIGHT    = 1\n    DIM       = 2\n    NORMAL    = 22\n    RESET_ALL = 0\nFore   = AnsiFore()\nBack   = AnsiBack()\nStyle  = AnsiStyle()\nCursor = AnsiCursor()",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "code_to_chars",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "def code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "set_title",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "def set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "clear_screen",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "def clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same\n        # as the class attributes but wrapped with the ANSI escape sequence\n        for name in dir(self):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "clear_line",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "def clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):\n    def __init__(self):\n        # the subclasses declare class attributes which are numbers.\n        # Upon instantiation we define instance attributes, which are the same\n        # as the class attributes but wrapped with the ANSI escape sequence\n        for name in dir(self):\n            if not name.startswith('_'):\n                value = getattr(self, name)",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "CSI",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "CSI = '\\033['\nOSC = '\\033]'\nBEL = '\\a'\ndef code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "OSC",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "OSC = '\\033]'\nBEL = '\\a'\ndef code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "BEL",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "BEL = '\\a'\ndef code_to_chars(code):\n    return CSI + str(code) + 'm'\ndef set_title(title):\n    return OSC + '2;' + title + BEL\ndef clear_screen(mode=2):\n    return CSI + str(mode) + 'J'\ndef clear_line(mode=2):\n    return CSI + str(mode) + 'K'\nclass AnsiCodes(object):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "Cursor",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "peekOfCode": "Cursor = AnsiCursor()",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansi",
        "documentation": {}
    },
    {
        "label": "StreamWrapper",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "peekOfCode": "class StreamWrapper(object):\n    '''\n    Wraps a stream (such as stdout), acting as a transparent proxy for all\n    attribute access apart from method 'write()', which is delegated to our\n    Converter instance.\n    '''\n    def __init__(self, wrapped, converter):\n        # double-underscore everything to prevent clashes with names of\n        # attributes on the wrapped stream object.\n        self.__wrapped = wrapped",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "AnsiToWin32",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "peekOfCode": "class AnsiToWin32(object):\n    '''\n    Implements a 'write()' method which, on Windows, will strip ANSI character\n    sequences from the text, and if outputting to a tty, will convert them into\n    win32 function calls.\n    '''\n    ANSI_CSI_RE = re.compile('\\001?\\033\\\\[((?:\\\\d|;)*)([a-zA-Z])\\002?')   # Control Sequence Introducer\n    ANSI_OSC_RE = re.compile('\\001?\\033\\\\]([^\\a]*)(\\a)\\002?')             # Operating System Command\n    def __init__(self, wrapped, convert=None, strip=None, autoreset=False):\n        # The wrapped stream (normally sys.stdout or sys.stderr)",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "winterm",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "peekOfCode": "winterm = None\nif windll is not None:\n    winterm = WinTerm()\nclass StreamWrapper(object):\n    '''\n    Wraps a stream (such as stdout), acting as a transparent proxy for all\n    attribute access apart from method 'write()', which is delegated to our\n    Converter instance.\n    '''\n    def __init__(self, wrapped, converter):",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.ansitowin32",
        "documentation": {}
    },
    {
        "label": "reset_all",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def reset_all():\n    if AnsiToWin32 is not None:    # Issue #74: objects might become None at exit\n        AnsiToWin32(orig_stdout).reset_all()\ndef init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError('wrap=False conflicts with any other arg=True')\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def init(autoreset=False, convert=None, strip=None, wrap=True):\n    if not wrap and any([autoreset, convert, strip]):\n        raise ValueError('wrap=False conflicts with any other arg=True')\n    global wrapped_stdout, wrapped_stderr\n    global orig_stdout, orig_stderr\n    orig_stdout = sys.stdout\n    orig_stderr = sys.stderr\n    if sys.stdout is None:\n        wrapped_stdout = None\n    else:",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "deinit",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def deinit():\n    if orig_stdout is not None:\n        sys.stdout = orig_stdout\n    if orig_stderr is not None:\n        sys.stderr = orig_stderr\ndef just_fix_windows_console():\n    global fixed_windows_console\n    if sys.platform != \"win32\":\n        return\n    if fixed_windows_console:",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "just_fix_windows_console",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def just_fix_windows_console():\n    global fixed_windows_console\n    if sys.platform != \"win32\":\n        return\n    if fixed_windows_console:\n        return\n    if wrapped_stdout is not None or wrapped_stderr is not None:\n        # Someone already ran init() and it did stuff, so we won't second-guess them\n        return\n    # On newer versions of Windows, AnsiToWin32.__init__ will implicitly enable the",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "colorama_text",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def colorama_text(*args, **kwargs):\n    init(*args, **kwargs)\n    try:\n        yield\n    finally:\n        deinit()\ndef reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "reinit",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def reinit():\n    if wrapped_stdout is not None:\n        sys.stdout = wrapped_stdout\n    if wrapped_stderr is not None:\n        sys.stderr = wrapped_stderr\ndef wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream,\n            convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "wrap_stream",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "peekOfCode": "def wrap_stream(stream, convert, strip, autoreset, wrap):\n    if wrap:\n        wrapper = AnsiToWin32(stream,\n            convert=convert, strip=strip, autoreset=autoreset)\n        if wrapper.should_wrap():\n            stream = wrapper.stream\n    return stream\n# Use this for initial setup as well, to reduce code duplication\n_wipe_internal_state_for_tests()",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.initialise",
        "documentation": {}
    },
    {
        "label": "STDOUT",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "peekOfCode": "STDOUT = -11\nSTDERR = -12\nENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004\ntry:\n    import ctypes\n    from ctypes import LibraryLoader\n    windll = LibraryLoader(ctypes.WinDLL)\n    from ctypes import wintypes\nexcept (AttributeError, ImportError):\n    windll = None",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "documentation": {}
    },
    {
        "label": "STDERR",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "peekOfCode": "STDERR = -12\nENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004\ntry:\n    import ctypes\n    from ctypes import LibraryLoader\n    windll = LibraryLoader(ctypes.WinDLL)\n    from ctypes import wintypes\nexcept (AttributeError, ImportError):\n    windll = None\n    SetConsoleTextAttribute = lambda *_: None",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "documentation": {}
    },
    {
        "label": "ENABLE_VIRTUAL_TERMINAL_PROCESSING",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "peekOfCode": "ENABLE_VIRTUAL_TERMINAL_PROCESSING = 0x0004\ntry:\n    import ctypes\n    from ctypes import LibraryLoader\n    windll = LibraryLoader(ctypes.WinDLL)\n    from ctypes import wintypes\nexcept (AttributeError, ImportError):\n    windll = None\n    SetConsoleTextAttribute = lambda *_: None\n    winapi_test = lambda *_: None",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.win32",
        "documentation": {}
    },
    {
        "label": "WinColor",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "peekOfCode": "class WinColor(object):\n    BLACK   = 0\n    BLUE    = 1\n    GREEN   = 2\n    CYAN    = 3\n    RED     = 4\n    MAGENTA = 5\n    YELLOW  = 6\n    GREY    = 7\n# from wincon.h",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "WinStyle",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "peekOfCode": "class WinStyle(object):\n    NORMAL              = 0x00 # dim text, dim background\n    BRIGHT              = 0x08 # bright text, dim background\n    BRIGHT_BACKGROUND   = 0x80 # dim text, bright background\nclass WinTerm(object):\n    def __init__(self):\n        self._default = win32.GetConsoleScreenBufferInfo(win32.STDOUT).wAttributes\n        self.set_attrs(self._default)\n        self._default_fore = self._fore\n        self._default_back = self._back",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "WinTerm",
        "kind": 6,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "peekOfCode": "class WinTerm(object):\n    def __init__(self):\n        self._default = win32.GetConsoleScreenBufferInfo(win32.STDOUT).wAttributes\n        self.set_attrs(self._default)\n        self._default_fore = self._fore\n        self._default_back = self._back\n        self._default_style = self._style\n        # In order to emulate LIGHT_EX in windows, we borrow the BRIGHT style.\n        # So that LIGHT_EX colors and BRIGHT style do not clobber each other,\n        # we track them separately, since LIGHT_EX is overwritten by Fore/Back",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "enable_vt_processing",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "description": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "peekOfCode": "def enable_vt_processing(fd):\n    if win32.windll is None or not win32.winapi_test():\n        return False\n    try:\n        handle = get_osfhandle(fd)\n        mode = win32.GetConsoleMode(handle)\n        win32.SetConsoleMode(\n            handle,\n            mode | win32.ENABLE_VIRTUAL_TERMINAL_PROCESSING,\n        )",
        "detail": "colorama-0.4.6.colorama-0.4.6.colorama.winterm",
        "documentation": {}
    },
    {
        "label": "FORES",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "peekOfCode": "FORES = [ Fore.BLACK, Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE ]\nBACKS = [ Back.BLACK, Back.RED, Back.GREEN, Back.YELLOW, Back.BLUE, Back.MAGENTA, Back.CYAN, Back.WHITE ]\nSTYLES = [ Style.DIM, Style.NORMAL, Style.BRIGHT ]\nNAMES = {\n    Fore.BLACK: 'black', Fore.RED: 'red', Fore.GREEN: 'green', Fore.YELLOW: 'yellow', Fore.BLUE: 'blue', Fore.MAGENTA: 'magenta', Fore.CYAN: 'cyan', Fore.WHITE: 'white'\n    , Fore.RESET: 'reset',\n    Back.BLACK: 'black', Back.RED: 'red', Back.GREEN: 'green', Back.YELLOW: 'yellow', Back.BLUE: 'blue', Back.MAGENTA: 'magenta', Back.CYAN: 'cyan', Back.WHITE: 'white',\n    Back.RESET: 'reset'\n}\n# show the color names",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "documentation": {}
    },
    {
        "label": "BACKS",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "peekOfCode": "BACKS = [ Back.BLACK, Back.RED, Back.GREEN, Back.YELLOW, Back.BLUE, Back.MAGENTA, Back.CYAN, Back.WHITE ]\nSTYLES = [ Style.DIM, Style.NORMAL, Style.BRIGHT ]\nNAMES = {\n    Fore.BLACK: 'black', Fore.RED: 'red', Fore.GREEN: 'green', Fore.YELLOW: 'yellow', Fore.BLUE: 'blue', Fore.MAGENTA: 'magenta', Fore.CYAN: 'cyan', Fore.WHITE: 'white'\n    , Fore.RESET: 'reset',\n    Back.BLACK: 'black', Back.RED: 'red', Back.GREEN: 'green', Back.YELLOW: 'yellow', Back.BLUE: 'blue', Back.MAGENTA: 'magenta', Back.CYAN: 'cyan', Back.WHITE: 'white',\n    Back.RESET: 'reset'\n}\n# show the color names\nsys.stdout.write('        ')",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "documentation": {}
    },
    {
        "label": "STYLES",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "peekOfCode": "STYLES = [ Style.DIM, Style.NORMAL, Style.BRIGHT ]\nNAMES = {\n    Fore.BLACK: 'black', Fore.RED: 'red', Fore.GREEN: 'green', Fore.YELLOW: 'yellow', Fore.BLUE: 'blue', Fore.MAGENTA: 'magenta', Fore.CYAN: 'cyan', Fore.WHITE: 'white'\n    , Fore.RESET: 'reset',\n    Back.BLACK: 'black', Back.RED: 'red', Back.GREEN: 'green', Back.YELLOW: 'yellow', Back.BLUE: 'blue', Back.MAGENTA: 'magenta', Back.CYAN: 'cyan', Back.WHITE: 'white',\n    Back.RESET: 'reset'\n}\n# show the color names\nsys.stdout.write('        ')\nfor foreground in FORES:",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "documentation": {}
    },
    {
        "label": "NAMES",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "peekOfCode": "NAMES = {\n    Fore.BLACK: 'black', Fore.RED: 'red', Fore.GREEN: 'green', Fore.YELLOW: 'yellow', Fore.BLUE: 'blue', Fore.MAGENTA: 'magenta', Fore.CYAN: 'cyan', Fore.WHITE: 'white'\n    , Fore.RESET: 'reset',\n    Back.BLACK: 'black', Back.RED: 'red', Back.GREEN: 'green', Back.YELLOW: 'yellow', Back.BLUE: 'blue', Back.MAGENTA: 'magenta', Back.CYAN: 'cyan', Back.WHITE: 'white',\n    Back.RESET: 'reset'\n}\n# show the color names\nsys.stdout.write('        ')\nfor foreground in FORES:\n    sys.stdout.write('%s%-7s' % (foreground, NAMES[foreground]))",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo01",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "peekOfCode": "def main():\n    colorama.just_fix_windows_console()\n    pos = lambda y, x: Cursor.POS(x, y)\n    # draw a white border.\n    print(Back.WHITE, end='')\n    print('%s%s' % (pos(MINY, MINX), ' '*MAXX), end='')\n    for y in range(MINY, 1+MAXY):\n        print('%s %s ' % (pos(y, MINX), pos(y, MAXX)), end='')\n    print('%s%s' % (pos(MAXY, MINX), ' '*MAXX), end='')\n    # draw some blinky lights for a while.",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "documentation": {}
    },
    {
        "label": "FORES",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "peekOfCode": "FORES = [ Fore.BLACK, Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE ]\nBACKS = [ Back.BLACK, Back.RED, Back.GREEN, Back.YELLOW, Back.BLUE, Back.MAGENTA, Back.CYAN, Back.WHITE ]\nSTYLES = [ Style.DIM, Style.NORMAL, Style.BRIGHT ]\n# This assumes your terminal is 80x24. Ansi minimum coordinate is (1,1).\nMINY, MAXY = 1, 24\nMINX, MAXX = 1, 80\n# set of printable ASCII characters, including a space.\nCHARS = ' ' + printable.strip()\nPASSES = 1000\ndef main():",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "documentation": {}
    },
    {
        "label": "BACKS",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "peekOfCode": "BACKS = [ Back.BLACK, Back.RED, Back.GREEN, Back.YELLOW, Back.BLUE, Back.MAGENTA, Back.CYAN, Back.WHITE ]\nSTYLES = [ Style.DIM, Style.NORMAL, Style.BRIGHT ]\n# This assumes your terminal is 80x24. Ansi minimum coordinate is (1,1).\nMINY, MAXY = 1, 24\nMINX, MAXX = 1, 80\n# set of printable ASCII characters, including a space.\nCHARS = ' ' + printable.strip()\nPASSES = 1000\ndef main():\n    colorama.just_fix_windows_console()",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "documentation": {}
    },
    {
        "label": "STYLES",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "peekOfCode": "STYLES = [ Style.DIM, Style.NORMAL, Style.BRIGHT ]\n# This assumes your terminal is 80x24. Ansi minimum coordinate is (1,1).\nMINY, MAXY = 1, 24\nMINX, MAXX = 1, 80\n# set of printable ASCII characters, including a space.\nCHARS = ' ' + printable.strip()\nPASSES = 1000\ndef main():\n    colorama.just_fix_windows_console()\n    pos = lambda y, x: Cursor.POS(x, y)",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "documentation": {}
    },
    {
        "label": "CHARS",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "peekOfCode": "CHARS = ' ' + printable.strip()\nPASSES = 1000\ndef main():\n    colorama.just_fix_windows_console()\n    pos = lambda y, x: Cursor.POS(x, y)\n    # draw a white border.\n    print(Back.WHITE, end='')\n    print('%s%s' % (pos(MINY, MINX), ' '*MAXX), end='')\n    for y in range(MINY, 1+MAXY):\n        print('%s %s ' % (pos(y, MINX), pos(y, MAXX)), end='')",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "documentation": {}
    },
    {
        "label": "PASSES",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "peekOfCode": "PASSES = 1000\ndef main():\n    colorama.just_fix_windows_console()\n    pos = lambda y, x: Cursor.POS(x, y)\n    # draw a white border.\n    print(Back.WHITE, end='')\n    print('%s%s' % (pos(MINY, MINX), ' '*MAXX), end='')\n    for y in range(MINY, 1+MAXY):\n        print('%s %s ' % (pos(y, MINX), pos(y, MAXX)), end='')\n    print('%s%s' % (pos(MAXY, MINX), ' '*MAXX), end='')",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo06",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "peekOfCode": "def main():\n    \"\"\"\n    expected output:\n    1a2\n    aba\n    3a4\n    \"\"\"\n    colorama.just_fix_windows_console()\n    print(\"aaa\")\n    print(\"aaa\")",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "documentation": {}
    },
    {
        "label": "up",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "peekOfCode": "up = colorama.Cursor.UP\ndown = colorama.Cursor.DOWN\nforward = colorama.Cursor.FORWARD\nback = colorama.Cursor.BACK\ndef main():\n    \"\"\"\n    expected output:\n    1a2\n    aba\n    3a4",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "documentation": {}
    },
    {
        "label": "down",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "peekOfCode": "down = colorama.Cursor.DOWN\nforward = colorama.Cursor.FORWARD\nback = colorama.Cursor.BACK\ndef main():\n    \"\"\"\n    expected output:\n    1a2\n    aba\n    3a4\n    \"\"\"",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "documentation": {}
    },
    {
        "label": "forward",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "peekOfCode": "forward = colorama.Cursor.FORWARD\nback = colorama.Cursor.BACK\ndef main():\n    \"\"\"\n    expected output:\n    1a2\n    aba\n    3a4\n    \"\"\"\n    colorama.just_fix_windows_console()",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "documentation": {}
    },
    {
        "label": "back",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "peekOfCode": "back = colorama.Cursor.BACK\ndef main():\n    \"\"\"\n    expected output:\n    1a2\n    aba\n    3a4\n    \"\"\"\n    colorama.just_fix_windows_console()\n    print(\"aaa\")",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo07",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo08",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo08",
        "peekOfCode": "def main():\n    \"\"\"automatically reset stdout\"\"\"\n    with colorama_text():\n        print(Fore.GREEN + 'text is green')\n        print(Fore.RESET + 'text is back to normal')\n    print('text is back to stdout')\nif __name__ == '__main__':\n    main()",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo08",
        "documentation": {}
    },
    {
        "label": "format",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "peekOfCode": "def format(module):\n    return list(map(lambda x: x.lower(),module.__dict__.keys()))\ndef find(module,item):\n    return module.__dict__[item.upper()]\nparser.add_argument(\"-c\",\"--colour\",choices=format(Fore),default=\"RESET\")\nparser.add_argument(\"-b\",\"--background\",choices=format(Back),default=\"RESET\")\nparser.add_argument(\"-s\",\"--style\",choices=format(Style),default=\"RESET_ALL\")\nparser.add_argument(\"-t\",\"--text\",default=\"Lorem ipsum dolor sit amet\")\nargs = parser.parse_args()\nprint(find(Style,args.style) + find(Fore,args.colour) + find(Back,args.background) + args.text + Style.RESET_ALL)",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "documentation": {}
    },
    {
        "label": "find",
        "kind": 2,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "peekOfCode": "def find(module,item):\n    return module.__dict__[item.upper()]\nparser.add_argument(\"-c\",\"--colour\",choices=format(Fore),default=\"RESET\")\nparser.add_argument(\"-b\",\"--background\",choices=format(Back),default=\"RESET\")\nparser.add_argument(\"-s\",\"--style\",choices=format(Style),default=\"RESET_ALL\")\nparser.add_argument(\"-t\",\"--text\",default=\"Lorem ipsum dolor sit amet\")\nargs = parser.parse_args()\nprint(find(Style,args.style) + find(Fore,args.colour) + find(Back,args.background) + args.text + Style.RESET_ALL)",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "documentation": {}
    },
    {
        "label": "parser",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "peekOfCode": "parser = argparse.ArgumentParser(\"colorama demo\")\ndef format(module):\n    return list(map(lambda x: x.lower(),module.__dict__.keys()))\ndef find(module,item):\n    return module.__dict__[item.upper()]\nparser.add_argument(\"-c\",\"--colour\",choices=format(Fore),default=\"RESET\")\nparser.add_argument(\"-b\",\"--background\",choices=format(Back),default=\"RESET\")\nparser.add_argument(\"-s\",\"--style\",choices=format(Style),default=\"RESET_ALL\")\nparser.add_argument(\"-t\",\"--text\",default=\"Lorem ipsum dolor sit amet\")\nargs = parser.parse_args()",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "documentation": {}
    },
    {
        "label": "args",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "peekOfCode": "args = parser.parse_args()\nprint(find(Style,args.style) + find(Fore,args.colour) + find(Back,args.background) + args.text + Style.RESET_ALL)",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.demo09",
        "documentation": {}
    },
    {
        "label": "local_colorama_module",
        "kind": 5,
        "importPath": "colorama-0.4.6.colorama-0.4.6.demos.fixpath",
        "description": "colorama-0.4.6.colorama-0.4.6.demos.fixpath",
        "peekOfCode": "local_colorama_module = normpath(join(dirname(__file__), '..'))\nsys.path.insert(0, local_colorama_module)",
        "detail": "colorama-0.4.6.colorama-0.4.6.demos.fixpath",
        "documentation": {}
    },
    {
        "label": "x",
        "kind": 5,
        "importPath": "Harvard CS50 Intro to Python.calculator",
        "description": "Harvard CS50 Intro to Python.calculator",
        "peekOfCode": "x = float(input(\"What's x? \"))\ny = float(input(\"What's y? \"))\nz = round(x / y, 2)\nprint(f\"{z:.2f}\")",
        "detail": "Harvard CS50 Intro to Python.calculator",
        "documentation": {}
    },
    {
        "label": "y",
        "kind": 5,
        "importPath": "Harvard CS50 Intro to Python.calculator",
        "description": "Harvard CS50 Intro to Python.calculator",
        "peekOfCode": "y = float(input(\"What's y? \"))\nz = round(x / y, 2)\nprint(f\"{z:.2f}\")",
        "detail": "Harvard CS50 Intro to Python.calculator",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": "Harvard CS50 Intro to Python.calculator",
        "description": "Harvard CS50 Intro to Python.calculator",
        "peekOfCode": "z = round(x / y, 2)\nprint(f\"{z:.2f}\")",
        "detail": "Harvard CS50 Intro to Python.calculator",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "Harvard CS50 Intro to Python.main",
        "description": "Harvard CS50 Intro to Python.main",
        "peekOfCode": "def main():\n    name = input(\"What's you name? \")\n    hello(name)\ndef hello(to=\"user\"):\n    print(\"hello,\", to)\nmain()",
        "detail": "Harvard CS50 Intro to Python.main",
        "documentation": {}
    },
    {
        "label": "hello",
        "kind": 2,
        "importPath": "Harvard CS50 Intro to Python.main",
        "description": "Harvard CS50 Intro to Python.main",
        "peekOfCode": "def hello(to=\"user\"):\n    print(\"hello,\", to)\nmain()",
        "detail": "Harvard CS50 Intro to Python.main",
        "documentation": {}
    },
    {
        "label": "splitString",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "description": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "peekOfCode": "splitString = \"This string has been\\nsplit over\\nseveral\\nlines\"\nprint(splitString)\ntabbedString = \"1\\t2\\t3\\t4\\t5\"\nprint(tabbedString)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\". ')\n# or \nprint(\"The pet shop owner said \\\"No, no, 'e's uh,...he's resting\\\".\")\nprint(\"\"\"The pet shop owner said \"No, no, 'e's uh,...he's resting\". \"\"\")\nanotherSplitString = \"\"\"\\nThis string has been \\\nsplit over \\",
        "detail": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "documentation": {}
    },
    {
        "label": "tabbedString",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "description": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "peekOfCode": "tabbedString = \"1\\t2\\t3\\t4\\t5\"\nprint(tabbedString)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\". ')\n# or \nprint(\"The pet shop owner said \\\"No, no, 'e's uh,...he's resting\\\".\")\nprint(\"\"\"The pet shop owner said \"No, no, 'e's uh,...he's resting\". \"\"\")\nanotherSplitString = \"\"\"\\nThis string has been \\\nsplit over \\\nseveral \\\nlines\"\"\"",
        "detail": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "documentation": {}
    },
    {
        "label": "anotherSplitString",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "description": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "peekOfCode": "anotherSplitString = \"\"\"\\nThis string has been \\\nsplit over \\\nseveral \\\nlines\"\"\"\nprint(anotherSplitString)\n# Double \\\\ cancel each other out\nprint(\"C:\\\\Users\\\\mike_\\\\OneDrive\\\\Desktop\\\\Python\")\n# r-(Raw)- takes the content for what they are\nprint(r\"C:\\Users\\mike_\\OneDrive\\Desktop\\Python\")",
        "detail": "Tim_Buchalka.python.Files02.02.2025.escapechar",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.operators",
        "description": "Tim_Buchalka.python.Files02.02.2025.operators",
        "peekOfCode": "a = 12 ;import os;os.system('cls')\nb = 3\nprint(a + b)  # 15\nprint(a - b)  # 9\nprint(a * b)  # 36\nprint(a / b)  # 4.0\nprint(a // b) # 4 integer division, rounded down towards minus infinity\nprint(a % b)  # 0 modulo: the remainder after integer division\nprint()\n# PEMDAS-(Parentheses(), Exponents**, Multiplication*, Division/, Addition+, Subtraction-)-",
        "detail": "Tim_Buchalka.python.Files02.02.2025.operators",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.operators",
        "description": "Tim_Buchalka.python.Files02.02.2025.operators",
        "peekOfCode": "b = 3\nprint(a + b)  # 15\nprint(a - b)  # 9\nprint(a * b)  # 36\nprint(a / b)  # 4.0\nprint(a // b) # 4 integer division, rounded down towards minus infinity\nprint(a % b)  # 0 modulo: the remainder after integer division\nprint()\n# PEMDAS-(Parentheses(), Exponents**, Multiplication*, Division/, Addition+, Subtraction-)-\nprint(a + b / 3 - 4 * 12)",
        "detail": "Tim_Buchalka.python.Files02.02.2025.operators",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.operators",
        "description": "Tim_Buchalka.python.Files02.02.2025.operators",
        "peekOfCode": "c = a + b\nd = c / 3\ne = d - 4\nprint(e * 12)\nprint()\nprint(a / (b * a) / b)",
        "detail": "Tim_Buchalka.python.Files02.02.2025.operators",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.operators",
        "description": "Tim_Buchalka.python.Files02.02.2025.operators",
        "peekOfCode": "d = c / 3\ne = d - 4\nprint(e * 12)\nprint()\nprint(a / (b * a) / b)",
        "detail": "Tim_Buchalka.python.Files02.02.2025.operators",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.operators",
        "description": "Tim_Buchalka.python.Files02.02.2025.operators",
        "peekOfCode": "e = d - 4\nprint(e * 12)\nprint()\nprint(a / (b * a) / b)",
        "detail": "Tim_Buchalka.python.Files02.02.2025.operators",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.strings",
        "description": "Tim_Buchalka.python.Files02.02.2025.strings",
        "peekOfCode": "greeting = \"Hello\"\nname = \"Michael\"\nprint(greeting, name)\n# if we want a space, we can add that too\nprint(greeting,name)\nage = 24\nprint(age)\nprint(type(greeting))\nprint(type(age))\nage_in_words = \"2 years\"",
        "detail": "Tim_Buchalka.python.Files02.02.2025.strings",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.strings",
        "description": "Tim_Buchalka.python.Files02.02.2025.strings",
        "peekOfCode": "name = \"Michael\"\nprint(greeting, name)\n# if we want a space, we can add that too\nprint(greeting,name)\nage = 24\nprint(age)\nprint(type(greeting))\nprint(type(age))\nage_in_words = \"2 years\"\n## f string ",
        "detail": "Tim_Buchalka.python.Files02.02.2025.strings",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.strings",
        "description": "Tim_Buchalka.python.Files02.02.2025.strings",
        "peekOfCode": "age = 24\nprint(age)\nprint(type(greeting))\nprint(type(age))\nage_in_words = \"2 years\"\n## f string \nprint(name + f\" is {age} years old\")\nprint(type(age))\nprint(f\"Pi is approximately {22 / 7:12.50f}\")\npi = 22 / 7",
        "detail": "Tim_Buchalka.python.Files02.02.2025.strings",
        "documentation": {}
    },
    {
        "label": "age_in_words",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.strings",
        "description": "Tim_Buchalka.python.Files02.02.2025.strings",
        "peekOfCode": "age_in_words = \"2 years\"\n## f string \nprint(name + f\" is {age} years old\")\nprint(type(age))\nprint(f\"Pi is approximately {22 / 7:12.50f}\")\npi = 22 / 7\nprint(f\"Pi is approximately {pi}\")\nprint(\"\\n\"*10)",
        "detail": "Tim_Buchalka.python.Files02.02.2025.strings",
        "documentation": {}
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.02.2025.strings",
        "description": "Tim_Buchalka.python.Files02.02.2025.strings",
        "peekOfCode": "pi = 22 / 7\nprint(f\"Pi is approximately {pi}\")\nprint(\"\\n\"*10)",
        "detail": "Tim_Buchalka.python.Files02.02.2025.strings",
        "documentation": {}
    },
    {
        "label": "available_exits",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.adventure",
        "description": "Tim_Buchalka.python.Files02.program_flow.adventure",
        "peekOfCode": "available_exits = [\"north\", \"south\", \"east\", \"west\"]\nchosen_exit = \"\"\nwhile chosen_exit not in available_exits:\n    chosen_exit = input(\"Please choose a direction: \")\n    if chosen_exit.casefold() == \"quit\":\n        print(\"Game over\")\n        break\nprint(\"aren't you glad you got out of there\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.adventure",
        "documentation": {}
    },
    {
        "label": "chosen_exit",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.adventure",
        "description": "Tim_Buchalka.python.Files02.program_flow.adventure",
        "peekOfCode": "chosen_exit = \"\"\nwhile chosen_exit not in available_exits:\n    chosen_exit = input(\"Please choose a direction: \")\n    if chosen_exit.casefold() == \"quit\":\n        print(\"Game over\")\n        break\nprint(\"aren't you glad you got out of there\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.adventure",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.blocks",
        "description": "Tim_Buchalka.python.Files02.program_flow.blocks",
        "peekOfCode": "name = input(\"Please enter your name: \")\nage = int(input(\"How old are you, {0}? \".format(name))) # turns age into a Integer(number)\n# print(age)\n# if age >= 18:\n    # print(\"You are old enough to vote!\")\n    # print(\"Please put an X in the box\")\n# else:\n    # print(\"Please come back in {0} years\".format(18 - age))\nif age < 18 & age > 90:\n    print(\"Please come back in {0} years\".format(18 - age))",
        "detail": "Tim_Buchalka.python.Files02.program_flow.blocks",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.blocks",
        "description": "Tim_Buchalka.python.Files02.program_flow.blocks",
        "peekOfCode": "age = int(input(\"How old are you, {0}? \".format(name))) # turns age into a Integer(number)\n# print(age)\n# if age >= 18:\n    # print(\"You are old enough to vote!\")\n    # print(\"Please put an X in the box\")\n# else:\n    # print(\"Please come back in {0} years\".format(18 - age))\nif age < 18 & age > 90:\n    print(\"Please come back in {0} years\".format(18 - age))\nelif age == 900:",
        "detail": "Tim_Buchalka.python.Files02.program_flow.blocks",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.checkingin",
        "description": "Tim_Buchalka.python.Files02.program_flow.checkingin",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nletter = input(\"Enter a character: \")\nif letter in parrot:\n    print(\"{} is in {}\".format(letter,parrot))\nelse:\n    print(\"I don't need that letter\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.checkingin",
        "documentation": {}
    },
    {
        "label": "letter",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.checkingin",
        "description": "Tim_Buchalka.python.Files02.program_flow.checkingin",
        "peekOfCode": "letter = input(\"Enter a character: \")\nif letter in parrot:\n    print(\"{} is in {}\".format(letter,parrot))\nelse:\n    print(\"I don't need that letter\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.checkingin",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.conditions",
        "description": "Tim_Buchalka.python.Files02.program_flow.conditions",
        "peekOfCode": "age = int(input(\"How old are you? \"))\n## age is greater than or equal to 16 AND age is less than or equal to 65\nif age >= 16 and age <= 65:\n    pass\n## Simpler than the code above\n## if 16 is less or equal to age. age is less than or equal to 65\n# if 16 <= age <= 65:\nif age in range(16,66):\n    print(\"Have a good day at work\")\nelse:",
        "detail": "Tim_Buchalka.python.Files02.program_flow.conditions",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.forloops",
        "description": "Tim_Buchalka.python.Files02.program_flow.forloops",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nfor character in parrot[1]:\n    print(character)",
        "detail": "Tim_Buchalka.python.Files02.program_flow.forloops",
        "documentation": {}
    },
    {
        "label": "hightest",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "description": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "peekOfCode": "hightest = 1000\nanswer = random.randint(1,hightest)\nprint(answer) ## TODO: Remove after testing\nprint(\"Please guess a number between 1 and {} enter {} to quit: \".format(hightest,0))\nguess = 0 ## initialise to any number that doesn't equal the answer range\n## Instructors way\n# while guess != answer:\n#     guess = int(input())\n#     if guess == 0: ## break out of the while loop\n#         break",
        "detail": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "description": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "peekOfCode": "answer = random.randint(1,hightest)\nprint(answer) ## TODO: Remove after testing\nprint(\"Please guess a number between 1 and {} enter {} to quit: \".format(hightest,0))\nguess = 0 ## initialise to any number that doesn't equal the answer range\n## Instructors way\n# while guess != answer:\n#     guess = int(input())\n#     if guess == 0: ## break out of the while loop\n#         break\n#     if guess == answer: ## correct answer break out of the loop",
        "detail": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "description": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "peekOfCode": "guess = 0 ## initialise to any number that doesn't equal the answer range\n## Instructors way\n# while guess != answer:\n#     guess = int(input())\n#     if guess == 0: ## break out of the while loop\n#         break\n#     if guess == answer: ## correct answer break out of the loop\n#         print(\"Well done, you guessed it \")\n#         break\n#     else: ## if the guess is not right or 0 than this block will execute",
        "detail": "Tim_Buchalka.python.Files02.program_flow.guessinggame",
        "documentation": {}
    },
    {
        "label": "low",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "description": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "peekOfCode": "low = 1\nhigh = 1000\nprint(\"Please think of a number between {} and {}\".format(low,high))\ninput(\"Press ENTER to start\")\nguess = 1\nwhile True:\n    ## guess == (high - low) // 2 + low \n    guess = low + (high - low) // 2\n    high_low = input(\"My guess is {}. Should I guess higher or lower\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "documentation": {}
    },
    {
        "label": "high",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "description": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "peekOfCode": "high = 1000\nprint(\"Please think of a number between {} and {}\".format(low,high))\ninput(\"Press ENTER to start\")\nguess = 1\nwhile True:\n    ## guess == (high - low) // 2 + low \n    guess = low + (high - low) // 2\n    high_low = input(\"My guess is {}. Should I guess higher or lower\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "description": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "peekOfCode": "guess = 1\nwhile True:\n    ## guess == (high - low) // 2 + low \n    guess = low + (high - low) // 2\n    high_low = input(\"My guess is {}. Should I guess higher or lower\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.highlow",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.notin",
        "description": "Tim_Buchalka.python.Files02.program_flow.notin",
        "peekOfCode": "name = input(\"What is your name: \")\nage = int(input(\"How old are you? \"))\nif age >= 18 and age <= 30:\n    print(\"Hey {0}, welcome to the holiday\".format(name))\nelse:\n    print(\"Sorry {0}, you can't come on this holiday \".format(name))\nprint('\\n'*8)",
        "detail": "Tim_Buchalka.python.Files02.program_flow.notin",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.notin",
        "description": "Tim_Buchalka.python.Files02.program_flow.notin",
        "peekOfCode": "age = int(input(\"How old are you? \"))\nif age >= 18 and age <= 30:\n    print(\"Hey {0}, welcome to the holiday\".format(name))\nelse:\n    print(\"Sorry {0}, you can't come on this holiday \".format(name))\nprint('\\n'*8)",
        "detail": "Tim_Buchalka.python.Files02.program_flow.notin",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.searching",
        "description": "Tim_Buchalka.python.Files02.program_flow.searching",
        "peekOfCode": "shopping_list = [\"milk\",\"pasta\",\"eggs\",\"spam\",\"bread\",\"rice\"]\nitem_to_find = \"eggs\"\nfound_at = None\n# ## this for loop takes the full length of the shopping_list\nfor index in range(len(shopping_list)):\n    ## this for loop goes through the shopping_list until it finds the value assigned to the variable item_to_find\n    ## idex is the number value of everything in the list\n    if shopping_list[index] == item_to_find:\n        ## sets the value of found_at to the index \n        found_at = index",
        "detail": "Tim_Buchalka.python.Files02.program_flow.searching",
        "documentation": {}
    },
    {
        "label": "item_to_find",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.searching",
        "description": "Tim_Buchalka.python.Files02.program_flow.searching",
        "peekOfCode": "item_to_find = \"eggs\"\nfound_at = None\n# ## this for loop takes the full length of the shopping_list\nfor index in range(len(shopping_list)):\n    ## this for loop goes through the shopping_list until it finds the value assigned to the variable item_to_find\n    ## idex is the number value of everything in the list\n    if shopping_list[index] == item_to_find:\n        ## sets the value of found_at to the index \n        found_at = index\n# 1ST END",
        "detail": "Tim_Buchalka.python.Files02.program_flow.searching",
        "documentation": {}
    },
    {
        "label": "found_at",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.searching",
        "description": "Tim_Buchalka.python.Files02.program_flow.searching",
        "peekOfCode": "found_at = None\n# ## this for loop takes the full length of the shopping_list\nfor index in range(len(shopping_list)):\n    ## this for loop goes through the shopping_list until it finds the value assigned to the variable item_to_find\n    ## idex is the number value of everything in the list\n    if shopping_list[index] == item_to_find:\n        ## sets the value of found_at to the index \n        found_at = index\n# 1ST END\n## 2ND START",
        "detail": "Tim_Buchalka.python.Files02.program_flow.searching",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.searching",
        "description": "Tim_Buchalka.python.Files02.program_flow.searching",
        "peekOfCode": "shopping_list = [\"milk\",\"pasta\",\"eggs\",\"spam\",\"bread\",\"rice\"]\nitem_to_find = \"eggs\"\nfound_at = None\n## if item_to_find is in the shopping_list found_at will equal the index value of the item \nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\n## if item_to_find is in the list than found_at will equal the index value of that variable\nif found_at is not None:\n    print(\"Item found at position {}\".format(found_at))\n## if item_to_find is not in the shopping_list than the else block will execute",
        "detail": "Tim_Buchalka.python.Files02.program_flow.searching",
        "documentation": {}
    },
    {
        "label": "item_to_find",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.searching",
        "description": "Tim_Buchalka.python.Files02.program_flow.searching",
        "peekOfCode": "item_to_find = \"eggs\"\nfound_at = None\n## if item_to_find is in the shopping_list found_at will equal the index value of the item \nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\n## if item_to_find is in the list than found_at will equal the index value of that variable\nif found_at is not None:\n    print(\"Item found at position {}\".format(found_at))\n## if item_to_find is not in the shopping_list than the else block will execute\nelse:",
        "detail": "Tim_Buchalka.python.Files02.program_flow.searching",
        "documentation": {}
    },
    {
        "label": "found_at",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.searching",
        "description": "Tim_Buchalka.python.Files02.program_flow.searching",
        "peekOfCode": "found_at = None\n## if item_to_find is in the shopping_list found_at will equal the index value of the item \nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\n## if item_to_find is in the list than found_at will equal the index value of that variable\nif found_at is not None:\n    print(\"Item found at position {}\".format(found_at))\n## if item_to_find is not in the shopping_list than the else block will execute\nelse:\n    print(\"{} not found\".format(item_to_find))",
        "detail": "Tim_Buchalka.python.Files02.program_flow.searching",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.shopping",
        "description": "Tim_Buchalka.python.Files02.program_flow.shopping",
        "peekOfCode": "shopping_list = [\"milk\",\"pasta\",\"eggs\",\"spam\",\"bread\",\"rice\"]\n# for item in shopping_list:\n      ## if item does not equal spam print that item\n#     if item != \"spam\":\n#         print(\"Buy \" + item)\n# for item in shopping_list:\n#     ## if the item is spam the for loop will skip it and print out the next item in the list\n#     if item == \"spam\":\n#         continue\n#     print(\"Buy \" + item)",
        "detail": "Tim_Buchalka.python.Files02.program_flow.shopping",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "description": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "peekOfCode": "number = input(\"Please enter a series of numbers, using any separators you like: \")\nseparators = \"\" \nfor char in number:\n    if not char.isnumeric():\n        separators = separators + char\n# print(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint(sum([int(val) for val in values]))",
        "detail": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "documentation": {}
    },
    {
        "label": "separators",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "description": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "peekOfCode": "separators = \"\" \nfor char in number:\n    if not char.isnumeric():\n        separators = separators + char\n# print(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint(sum([int(val) for val in values]))",
        "detail": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "description": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "peekOfCode": "values = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint(sum([int(val) for val in values]))",
        "detail": "Tim_Buchalka.python.Files02.program_flow.strings2",
        "documentation": {}
    },
    {
        "label": "day",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "description": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "peekOfCode": "day = \"Saturday\"\ntemperature = 30\nraining = False\n## if the day is \"Saturday\" and the temperature is above 27 and it is not raining\n## if one is False than the else block will execute \nif (day == \"Saturday\" and temperature > 27) and not raining:\n    print(\"Go swimming\")\nelse:\n    print(\"Learn Python\")\n## if the day is \"Saturday\" and the temperature is above 27 or it is not raining",
        "detail": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "documentation": {}
    },
    {
        "label": "temperature",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "description": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "peekOfCode": "temperature = 30\nraining = False\n## if the day is \"Saturday\" and the temperature is above 27 and it is not raining\n## if one is False than the else block will execute \nif (day == \"Saturday\" and temperature > 27) and not raining:\n    print(\"Go swimming\")\nelse:\n    print(\"Learn Python\")\n## if the day is \"Saturday\" and the temperature is above 27 or it is not raining\n## if temperature OR it is not raining is true than the if block will execute",
        "detail": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "documentation": {}
    },
    {
        "label": "raining",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "description": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "peekOfCode": "raining = False\n## if the day is \"Saturday\" and the temperature is above 27 and it is not raining\n## if one is False than the else block will execute \nif (day == \"Saturday\" and temperature > 27) and not raining:\n    print(\"Go swimming\")\nelse:\n    print(\"Learn Python\")\n## if the day is \"Saturday\" and the temperature is above 27 or it is not raining\n## if temperature OR it is not raining is true than the if block will execute\nif day == \"Saturday\" and (temperature > 27 or not raining):",
        "detail": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "description": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "peekOfCode": "name = input(\"Please enter your name: \")\n# if name:\nif name != \"\":\n    print(\"Hello, {0}\".format(name))\nelse:\n    print(\"Are you the man with no name?\")",
        "detail": "Tim_Buchalka.python.Files02.program_flow.truefalse",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.program_flow.whileloop",
        "description": "Tim_Buchalka.python.Files02.program_flow.whileloop",
        "peekOfCode": "i = 0\n## Stops when i is greater than 10\nwhile i < 10: \n    print(\"i is now {}\".format(i))\n    ## Needed to increase the value of i\n    i += 1",
        "detail": "Tim_Buchalka.python.Files02.program_flow.whileloop",
        "documentation": {}
    },
    {
        "label": "current_choice",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.buy_computer",
        "description": "Tim_Buchalka.python.Files02.Sequences.buy_computer",
        "peekOfCode": "current_choice = \"-\"\ncomputer_parts = [] # create an empty list\nwhile current_choice != '0':\n    if current_choice in \"12345\":\n        print(\"Adding {}\".format(current_choice))\n        if current_choice == '1':\n            computer_parts.append(\"computer\")\n        elif current_choice == '2':\n            computer_parts.append(\"monitor\")\n        elif current_choice == '3':",
        "detail": "Tim_Buchalka.python.Files02.Sequences.buy_computer",
        "documentation": {}
    },
    {
        "label": "computer_parts",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.buy_computer",
        "description": "Tim_Buchalka.python.Files02.Sequences.buy_computer",
        "peekOfCode": "computer_parts = [] # create an empty list\nwhile current_choice != '0':\n    if current_choice in \"12345\":\n        print(\"Adding {}\".format(current_choice))\n        if current_choice == '1':\n            computer_parts.append(\"computer\")\n        elif current_choice == '2':\n            computer_parts.append(\"monitor\")\n        elif current_choice == '3':\n            computer_parts.append(\"keyboard\")",
        "detail": "Tim_Buchalka.python.Files02.Sequences.buy_computer",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.immutable",
        "description": "Tim_Buchalka.python.Files02.Sequences.immutable",
        "peekOfCode": "result = \"Correct\"\nanother_result = result\nprint(id(result))\nprint(id(another_result))\nresult += \"ish\"\nprint(id(result))\nprint(id(another_result))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.immutable",
        "documentation": {}
    },
    {
        "label": "another_result",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.immutable",
        "description": "Tim_Buchalka.python.Files02.Sequences.immutable",
        "peekOfCode": "another_result = result\nprint(id(result))\nprint(id(another_result))\nresult += \"ish\"\nprint(id(result))\nprint(id(another_result))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.immutable",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "description": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "peekOfCode": "age = 24\n## Python 2.0 \nprint(\"My age is %d years\" % age)\nmajor = \"years\"\nminor = \"months\"\n## \nprint(\"My age is %d %s, %d %s\" % (age, major,6,minor))\nprint(\"PI is approximately %f\" % (22 / 7))\nprint(\"PI is approximately %60.50f\" % (22 / 7))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "documentation": {}
    },
    {
        "label": "major",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "description": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "peekOfCode": "major = \"years\"\nminor = \"months\"\n## \nprint(\"My age is %d %s, %d %s\" % (age, major,6,minor))\nprint(\"PI is approximately %f\" % (22 / 7))\nprint(\"PI is approximately %60.50f\" % (22 / 7))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "documentation": {}
    },
    {
        "label": "minor",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "description": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "peekOfCode": "minor = \"months\"\n## \nprint(\"My age is %d %s, %d %s\" % (age, major,6,minor))\nprint(\"PI is approximately %f\" % (22 / 7))\nprint(\"PI is approximately %60.50f\" % (22 / 7))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.interpolation",
        "documentation": {}
    },
    {
        "label": "computer_parts",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.lists_intro",
        "description": "Tim_Buchalka.python.Files02.Sequences.lists_intro",
        "peekOfCode": "computer_parts = [\"computer\",\n                  \"monitor\",\n                  \"keyboard\",\n                  \"mouse\",\n                  \"mouse mat\"\n                  ]\nfor part in computer_parts:\n    print(part)\nprint()\nprint(computer_parts[2])",
        "detail": "Tim_Buchalka.python.Files02.Sequences.lists_intro",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "description": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "peekOfCode": "shopping_list = [\"milk\",\n                 \"pasta\",\n                 \"eggs\",\n                 \"spam\",\n                 \"bread\",\n                 \"rice\"\n                 ]\nanother_list = shopping_list\nprint(id(shopping_list))\nprint(id(another_list))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "documentation": {}
    },
    {
        "label": "another_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "description": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "peekOfCode": "another_list = shopping_list\nprint(id(shopping_list))\nprint(id(another_list))\nshopping_list += [\"cookies\"]\nprint(shopping_list)\nprint(id(shopping_list))\nprint(another_list)\na = b = c = d = e = f = another_list\nprint(a)\nprint(\"Adding cream\")",
        "detail": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "description": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "peekOfCode": "a = b = c = d = e = f = another_list\nprint(a)\nprint(\"Adding cream\")\nb.append(\"cream\")\nprint(c)\nprint(d)",
        "detail": "Tim_Buchalka.python.Files02.Sequences.mutable",
        "documentation": {}
    },
    {
        "label": "even",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.number_lists",
        "description": "Tim_Buchalka.python.Files02.Sequences.number_lists",
        "peekOfCode": "even = [2, 4, 6, 8]\nodd = [1, 3, 5, 7, 9]\nprint(min(even))\nprint(max(even))\nprint(min(odd))\nprint(max(odd))\nprint()\nprint(len(even))\nprint(len(odd))\nprint()",
        "detail": "Tim_Buchalka.python.Files02.Sequences.number_lists",
        "documentation": {}
    },
    {
        "label": "odd",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.number_lists",
        "description": "Tim_Buchalka.python.Files02.Sequences.number_lists",
        "peekOfCode": "odd = [1, 3, 5, 7, 9]\nprint(min(even))\nprint(max(even))\nprint(min(odd))\nprint(max(odd))\nprint()\nprint(len(even))\nprint(len(odd))\nprint()\nprint(\"mississippi\".count(\"issi\"))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.number_lists",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.repfields",
        "description": "Tim_Buchalka.python.Files02.Sequences.repfields",
        "peekOfCode": "age = 24\nprint(\"My age is {} years old\".format(age))\nprint(\"There are {0} days in {1}, {2}, {3}, {4}, {5}, {6}, and {7}\".format(31, \"Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\"))\nprint(\"There are {0} days in Jan, Mar, May, Jul, Aug, Oct, and Dec\".format(31))\nprint(\"Jan: {2}, Feb: {0}, Mar: {2}, Apr: {1}, May: {2}, Jun: {1}, Jul: {2}, Sep: {1}, Oct: {2}, Nov: {1}, Dec: {2}\".format(28,30,31))\nprint()\nprint(\"\"\"Jan: {2}\nFeb: {0} \nMar: {2} \nApr: {1} ",
        "detail": "Tim_Buchalka.python.Files02.Sequences.repfields",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "description": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "peekOfCode": "string1 = \"he's \"\nstring2 = \"probably \"\nstring3 = \"pinning \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1+ string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pinning \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))",
        "detail": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "description": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "peekOfCode": "string2 = \"probably \"\nstring3 = \"pinning \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1+ string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pinning \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")",
        "detail": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "description": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "peekOfCode": "string3 = \"pinning \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1+ string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pinning \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"",
        "detail": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string4",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "description": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "peekOfCode": "string4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1+ string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pinning \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)     # True",
        "detail": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string5",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "description": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "peekOfCode": "string5 = \"fjords\"\nprint(string1+ string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pinning \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\ntoday = \"friday\"\nprint(\"day\" in today)     # True\nprint(\"fri\" in today)     # True",
        "detail": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "description": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "peekOfCode": "today = \"friday\"\nprint(\"day\" in today)     # True\nprint(\"fri\" in today)     # True\nprint(\"thur\" in today)    # False\nprint(\"parrot\" in \"fjord\")# False",
        "detail": "Tim_Buchalka.python.Files02.Sequences.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "computer_parts",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Files02.Sequences.string",
        "description": "Tim_Buchalka.python.Files02.Sequences.string",
        "peekOfCode": "computer_parts = [\"computer\", \"monitor\", \"keyboard\", \"mouse\", \"mouse mat\"]\nprint(computer_parts[2])\nprint(\"\\n\"*5)",
        "detail": "Tim_Buchalka.python.Files02.Sequences.string",
        "documentation": {}
    },
    {
        "label": "lst",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.break",
        "description": "Tim_Buchalka.python.Older.A_top.py.break",
        "peekOfCode": "lst = [\"books\", \"pencils\", \"cyrons\", \"pens\", \"erasers\"]\nfor i in lst:\n    # print(i)\n    if i == \"pens\":\n        print(True)\n        break # to exit out of loop\nstring = \"\"\nwhile True:\n    user_input = input(\"Enter characters: \")\n    if user_input == \"quit\":",
        "detail": "Tim_Buchalka.python.Older.A_top.py.break",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.break",
        "description": "Tim_Buchalka.python.Older.A_top.py.break",
        "peekOfCode": "string = \"\"\nwhile True:\n    user_input = input(\"Enter characters: \")\n    if user_input == \"quit\":\n        print(string)\n        break\n    string = string + user_input\nprint(\"\\n\"*8)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.break",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.continue",
        "description": "Tim_Buchalka.python.Older.A_top.py.continue",
        "peekOfCode": "counter = 1\nwhile counter <= 10:\n    if counter % 2 == 0:\n        counter += 1\n        continue\n    print(counter)\n    counter += 1",
        "detail": "Tim_Buchalka.python.Older.A_top.py.continue",
        "documentation": {}
    },
    {
        "label": "fruit",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "description": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "peekOfCode": "fruit = {\"apple\":1, \"banana\": 2, \"cherry\": 3}\nprint(fruit)\n#add\nfruit[\"grape\"] = 5\nprint(fruit)\n#access\nprint(fruit[\"apple\"])\n#delete\ndel fruit[\"banana\"]\nprint(fruit)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "documentation": {}
    },
    {
        "label": "fruit[\"grape\"]",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "description": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "peekOfCode": "fruit[\"grape\"] = 5\nprint(fruit)\n#access\nprint(fruit[\"apple\"])\n#delete\ndel fruit[\"banana\"]\nprint(fruit)\nfruit[\"apple\"] = 4\nfruit[\"kiwi\"] = 3\nprint(fruit)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "documentation": {}
    },
    {
        "label": "fruit[\"apple\"]",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "description": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "peekOfCode": "fruit[\"apple\"] = 4\nfruit[\"kiwi\"] = 3\nprint(fruit)\nprint(\"grape\" + \"cherry\")\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "documentation": {}
    },
    {
        "label": "fruit[\"kiwi\"]",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "description": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "peekOfCode": "fruit[\"kiwi\"] = 3\nprint(fruit)\nprint(\"grape\" + \"cherry\")\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.dictionary",
        "documentation": {}
    },
    {
        "label": "mySet",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.sets",
        "description": "Tim_Buchalka.python.Older.A_top.py.sets",
        "peekOfCode": "mySet = {1, 2, 3, 4, 5, 5, 5, 5, \"apple\", 11.45, False}\n# print(mySet)\nmySet2 = set()\nmySet2.add(\"banana\")\nmySet2.add(\"mango\")\nmySet2.add(\"kiwi\")\nmySet2.add(\"apple\")\n# print(mySet2)\nmySet2.remove(\"kiwi\")\n# print(mySet2)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.sets",
        "documentation": {}
    },
    {
        "label": "mySet2",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.sets",
        "description": "Tim_Buchalka.python.Older.A_top.py.sets",
        "peekOfCode": "mySet2 = set()\nmySet2.add(\"banana\")\nmySet2.add(\"mango\")\nmySet2.add(\"kiwi\")\nmySet2.add(\"apple\")\n# print(mySet2)\nmySet2.remove(\"kiwi\")\n# print(mySet2)\nset1 = {1,2,3,4,}\nset2 = {3,4,5,6,7}",
        "detail": "Tim_Buchalka.python.Older.A_top.py.sets",
        "documentation": {}
    },
    {
        "label": "set1",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.sets",
        "description": "Tim_Buchalka.python.Older.A_top.py.sets",
        "peekOfCode": "set1 = {1,2,3,4,}\nset2 = {3,4,5,6,7}\n#union (|) pipe\nprint(set1 | set2)\n#intersection (&)\nprint(set1 & set2)\n#difference\n#takes both lists and only prints the differences\nprint(set1 - set2)\nprint(set2 - set1)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.sets",
        "documentation": {}
    },
    {
        "label": "set2",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.A_top.py.sets",
        "description": "Tim_Buchalka.python.Older.A_top.py.sets",
        "peekOfCode": "set2 = {3,4,5,6,7}\n#union (|) pipe\nprint(set1 | set2)\n#intersection (&)\nprint(set1 & set2)\n#difference\n#takes both lists and only prints the differences\nprint(set1 - set2)\nprint(set2 - set1)\nprint(\"\\n\"*4)",
        "detail": "Tim_Buchalka.python.Older.A_top.py.sets",
        "documentation": {}
    },
    {
        "label": "banner_text",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.banner",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.banner",
        "peekOfCode": "def banner_text(text=\" \", screen_width=80):\n    if len(text) > screen_width - 4:\n        raise ValueError(\"String {0} is larger then specified width {1}\"\n                         .format(text, screen_width))\n    if text == \"*\":\n        print(\"*\" * screen_width)\n    else:\n        centred_text = text.center(screen_width - 4)\n        output_string = \"**{0}**\".format(centred_text)\n        print(output_string)",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.banner",
        "documentation": {}
    },
    {
        "label": "colour_print",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "def colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.\n    :param effect:effect: The effect we want. One of the constants\n        defined at the start of this module.\n    \"\"\"\n    output_string = \"{0}{1}{2}\".format(effect, text, RESET)\n    print(output_string)\ncolorama.init()",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "BLACK = '\\u001b[30m'\nRED = '\\u001b[31m'\nGREEN = '\\u001b[32m'\nYELLOW = '\\u001b[33m'\nBLUE = '\\u001b[34m'\nMAGENTA = '\\u001b[35m'\nCYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "RED = '\\u001b[31m'\nGREEN = '\\u001b[32m'\nYELLOW = '\\u001b[33m'\nBLUE = '\\u001b[34m'\nMAGENTA = '\\u001b[35m'\nCYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "GREEN = '\\u001b[32m'\nYELLOW = '\\u001b[33m'\nBLUE = '\\u001b[34m'\nMAGENTA = '\\u001b[35m'\nCYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "YELLOW = '\\u001b[33m'\nBLUE = '\\u001b[34m'\nMAGENTA = '\\u001b[35m'\nCYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "BLUE = '\\u001b[34m'\nMAGENTA = '\\u001b[35m'\nCYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "MAGENTA",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "MAGENTA = '\\u001b[35m'\nCYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "CYAN",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "CYAN = '\\u001b[36m'\nWHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "WHITE = '\\u001b[37m'\nRESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.\n    :param effect:effect: The effect we want. One of the constants",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "RESET",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "RESET = '\\u001b[0m'\nBOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.\n    :param effect:effect: The effect we want. One of the constants\n        defined at the start of this module.",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "BOLD",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "BOLD = '\\u001b[1m'\nUNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.\n    :param effect:effect: The effect we want. One of the constants\n        defined at the start of this module.\n    \"\"\"",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "UNDERLINE",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "UNDERLINE = '\\u001b[4m'\nREVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.\n    :param effect:effect: The effect we want. One of the constants\n        defined at the start of this module.\n    \"\"\"\n    output_string = \"{0}{1}{2}\".format(effect, text, RESET)",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "REVERSE",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "peekOfCode": "REVERSE = '\\u001b[7m' #HIGHLIGHT default color is white\ndef colour_print(text: str, effect: str) -> None:\n    \"\"\"\n    Print `text` using the ANSI sequences to change colour, etc\n    :param text: The text to print.\n    :param effect:effect: The effect we want. One of the constants\n        defined at the start of this module.\n    \"\"\"\n    output_string = \"{0}{1}{2}\".format(effect, text, RESET)\n    print(output_string)",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.colour_print",
        "documentation": {}
    },
    {
        "label": "dnd_accept",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.Example_Docstring_Formats",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.Example_Docstring_Formats",
        "peekOfCode": "def dnd_accept(self, source, event):\n    \"\"\"\n    Decide what object will accept the drop.\n    The returned object will become the new target for the drop operation.\n    :param source: The object being dragged.\n    :param event: The tk event that resulted in this call.\n                  Usually a motion event.\n    :return: The object that will accept a drop - this widget.\n    \"\"\"\n    print(\"dnd_accept. Called on {}. source is {}, event type is {}\".format(self, source, event.type))",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.Example_Docstring_Formats",
        "documentation": {}
    },
    {
        "label": "on_dnd_start",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.Example_Docstring_Formats",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.Example_Docstring_Formats",
        "peekOfCode": "def on_dnd_start(event):\n    \"\"\"Starts a drag and drop (dnd) operation.\n    This is usually invoked by a mouse event binding on a\n    widget that can be dragged.\n    For example, `tile.bind('<ButtonPress>', on_dnd_start)`\n    Args:\n        event: The tk event that resulted in this call.\n    Returns:\n        The object to be dragged.  Here, it's the widget\n        that was clicked to call this function.",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.Example_Docstring_Formats",
        "documentation": {}
    },
    {
        "label": "multiply",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "peekOfCode": "def multiply(x: float, y: float) -> float:\n    \"\"\"\n    Multiply 2 numbers.\n    Although this function is intended to multiply 2 numbers,\n    you can also use it to multiply a sequence.  If you pass\n    a string, for example, as the first argument, you'll get\n    the string repeated `y` times as the returned value.\n    :param x: The first number to multiply.\n    :param y: The number to multiply `x` by.\n    :return: The product of `x` and `y`.",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "documentation": {}
    },
    {
        "label": "is_palindrome",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "peekOfCode": "def is_palindrome(string: str) -> bool:\n    \"\"\"\n    Check if a string is a palindrome.\n    A palindrome is a string that reads the same forwards as backwards.\n    :param string: The string to check.\n    :return: True if `string` is a palindrome, False otherwise.\n    \"\"\"\n    return string[::-1].casefold() == string.casefold()\ndef palindrome_sentence(sentence: str) -> bool:\n    \"\"\"",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "documentation": {}
    },
    {
        "label": "palindrome_sentence",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "peekOfCode": "def palindrome_sentence(sentence: str) -> bool:\n    \"\"\"\n    Check if a sentence is a palindrome.\n    The function ignores whitespace, capitalisation and\n    punctuation in the sentence.\n    :param sentence: The sentence to check.\n    :return: True if `sentence` is a palindrome, False otherwise.\n    \"\"\"\n    string = \"\"\n    for char in sentence:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "documentation": {}
    },
    {
        "label": "fibonacci",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "peekOfCode": "def fibonacci(n: int) -> int:\n    \"\"\"Return the `n` th Fibonacci number, for positive `n`.\"\"\"\n    if 0 <= n <= 1:\n        return n\n    n_minus1, n_minus2 = 1, 0\n    result = None\n    for f in range(n - 1):\n        result = n_minus2 + n_minus1\n        n_minus2 = n_minus1\n        n_minus1 = result",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "peekOfCode": "p = palindrome_sentence(242)",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.functions",
        "documentation": {}
    },
    {
        "label": "get_integer",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "peekOfCode": "def get_integer(prompt):\n    \"\"\"\n    Get an integer from Standard Input (stdin).\n    The function will continue looping, and prompting\n    the user, until a valid `int` is entered.\n    :param prompt: The String that the user will see, when\n        they're prompted to enter the value.\n    :return: The integer that the user enters.\n    \"\"\"\n    while True:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "documentation": {}
    },
    {
        "label": "highest",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "peekOfCode": "highest = 1000\nanswer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing\nguess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess number between 1 and {}: \".format(highest))\nwhile guess != answer:\n    guess = get_integer(\": \")\n    if guess == 0:\n        break\n    if guess == answer:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "peekOfCode": "answer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing\nguess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess number between 1 and {}: \".format(highest))\nwhile guess != answer:\n    guess = get_integer(\": \")\n    if guess == 0:\n        break\n    if guess == answer:\n        print(\"Well done, you guessed it\")",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "peekOfCode": "guess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess number between 1 and {}: \".format(highest))\nwhile guess != answer:\n    guess = get_integer(\": \")\n    if guess == 0:\n        break\n    if guess == answer:\n        print(\"Well done, you guessed it\")\n        break\n    else:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggame",
        "documentation": {}
    },
    {
        "label": "get_integer",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "peekOfCode": "def get_integer(prompt):\n    while True:\n        temp = input(prompt)\n        if temp.isnumeric():\n            return int(temp)\n        else:\n            print(\"{0} is not a valid number\".format(temp))\nhighest = 1000\nanswer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "documentation": {}
    },
    {
        "label": "highest",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "peekOfCode": "highest = 1000\nanswer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing\nguess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess number between 1 and {}: \".format(highest))\nwhile guess != answer:\n    guess = get_integer(\": \")\n    if guess == 0:\n        break\n    if guess == answer:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "peekOfCode": "answer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing\nguess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess number between 1 and {}: \".format(highest))\nwhile guess != answer:\n    guess = get_integer(\": \")\n    if guess == 0:\n        break\n    if guess == answer:\n        print(\"Well done, you guessed it\")",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "description": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "peekOfCode": "guess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess number between 1 and {}: \".format(highest))\nwhile guess != answer:\n    guess = get_integer(\": \")\n    if guess == 0:\n        break\n    if guess == answer:\n        print(\"Well done, you guessed it\")\n        break\n    else:",
        "detail": "Tim_Buchalka.python.Older.Functions_Intro.guessinggamelse",
        "documentation": {}
    },
    {
        "label": "splitstring",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "peekOfCode": "splitstring = \"This string has been\\nsplit over\\nseveral\\nlines\"\nprint(splitstring)\ntabbed_string = '1\\t2\\t3\\t4\\t5'\nprint(tabbed_string)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\".')\nprint(\"The pet shop owner said \\\"No, no, 'e's uh,...he's resting\\\".\")\nprint('''The pet shop owner said \"No, no, \\\n'e's uh,...he's resting\".''')\n# os.system(\"cls\")\nanothersplitstring = \"\"\"This string has been  \\",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "documentation": {}
    },
    {
        "label": "tabbed_string",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "peekOfCode": "tabbed_string = '1\\t2\\t3\\t4\\t5'\nprint(tabbed_string)\nprint('The pet shop owner said \"No, no, \\'e\\'s uh,...he\\'s resting\".')\nprint(\"The pet shop owner said \\\"No, no, 'e's uh,...he's resting\\\".\")\nprint('''The pet shop owner said \"No, no, \\\n'e's uh,...he's resting\".''')\n# os.system(\"cls\")\nanothersplitstring = \"\"\"This string has been  \\\nsplit over \\\nseveral \\",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "documentation": {}
    },
    {
        "label": "anothersplitstring",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "peekOfCode": "anothersplitstring = \"\"\"This string has been  \\\nsplit over \\\nseveral \\\nlines\"\"\"\nprint(anothersplitstring)\nos.system(\"cls\")\nprint(\"C:\\\\Users\\\\timbuchalka\\\\notes.txt\")\nprint(r\"C:\\Users\\timbuchalka\\notes.txt\") # r = raw string\nprint()\nprint()",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.escape_char",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "peekOfCode": "a = 12\nb = 3\nprint(a + b)  # 15\nprint(a - b)  # 9\nprint(a * b)  # 36\nprint(a / b)  # 4.0\nprint(a // b) # 4 integer division, rounded down towards minus infinity\nprint(a % b)  # 0 modulo: the remainder after integer division\nos.system(\"cls\")\nprint()",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "peekOfCode": "b = 3\nprint(a + b)  # 15\nprint(a - b)  # 9\nprint(a * b)  # 36\nprint(a / b)  # 4.0\nprint(a // b) # 4 integer division, rounded down towards minus infinity\nprint(a % b)  # 0 modulo: the remainder after integer division\nos.system(\"cls\")\nprint()\nos.system(\"cls\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "peekOfCode": "c = a + b\nd = c / 3\ne = d - 4\nprint(e * 12) # 12.0 \nos.system(\"cls\")\nprint(a / (b * a) / b)\nprint()\nprint()\nprint()",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "peekOfCode": "d = c / 3\ne = d - 4\nprint(e * 12) # 12.0 \nos.system(\"cls\")\nprint(a / (b * a) / b)\nprint()\nprint()\nprint()",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "peekOfCode": "e = d - 4\nprint(e * 12) # 12.0 \nos.system(\"cls\")\nprint(a / (b * a) / b)\nprint()\nprint()\nprint()",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.operators",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.repfields",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.repfields",
        "peekOfCode": "age = 24\nprint(\"My age is {0} years\".format(age))\nprint(\"There are {0} days in {2}, {2}, {3}, {4}, {5}, {6} and {7}\"\n      .format(31,\"Jan\",\"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\"))\nprint(\"There are {0} days in Jan, Mar, May, Jul, Aug, Oct and Dec\".format(31))\nprint(\"Jan: {2}, Feb: {0}, Mar: {2}, Apr: {1}, May {2}, Jun: {1}, Jul: {2}, Sep: {1}, Otc: {2}, Nov: {1}, Dec: {2}\"\n      .format(28, 30 ,31))\nprint()\nprint(\"\"\"Jan: {2}\nFeb: {0}",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.repfields",
        "documentation": {}
    },
    {
        "label": "string1",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "peekOfCode": "string1 = \"he's \"\nstring2 = \"probably \"\nstring3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string2",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "peekOfCode": "string2 = \"probably \"\nstring3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\nos.system(\"cls\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string3",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "peekOfCode": "string3 = \"pining \"\nstring4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\nos.system(\"cls\")\ntoday = \"friday\"",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string4",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "peekOfCode": "string4 = \"for the \"\nstring5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\nos.system(\"cls\")\ntoday = \"friday\"\nprint(\"day\" in today)",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "string5",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "peekOfCode": "string5 = \"fjords\"\nprint(string1 + string2 + string3 + string4 + string5)\nprint(\"he's \" \"probably \" \"pining \" \"for the \" \"fjords\")\nprint(\"Hello \" * 5)\nprint(\"Hello \" * (5 + 4))\nprint(\"Hello \" * 5 + \"4\")\nos.system(\"cls\")\ntoday = \"friday\"\nprint(\"day\" in today)\nprint(\"fri\" in today)",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "today",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "peekOfCode": "today = \"friday\"\nprint(\"day\" in today)\nprint(\"fri\" in today)\nprint(\"thur\" in today)\nprint(\"parrot\" in \"fjord\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sequenceOperators",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sliceback",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sliceback",
        "peekOfCode": "letters = \"abcdefghijklmnopqrstuvwxyz\"   ;import os;os.system(\"cls\");print('\\n'*2)\n            # [start:stop:step]\n## [::-1] will reverse the list\nbackwards = letters[::-1] # OUTPUT = zyxwvutsrqponmlkjihgfedcba\nprint(backwards)\nprint(letters[-10:13:-1]) # OUTPUT = qpo\nprint(letters[-22::-1])   # OUTPUT = edcba\nprint(letters[25:17:-1])  # OUTPUT = zyxwcuts",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sliceback",
        "documentation": {}
    },
    {
        "label": "backwards",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.sliceback",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.sliceback",
        "peekOfCode": "backwards = letters[::-1] # OUTPUT = zyxwvutsrqponmlkjihgfedcba\nprint(backwards)\nprint(letters[-10:13:-1]) # OUTPUT = qpo\nprint(letters[-22::-1])   # OUTPUT = edcba\nprint(letters[25:17:-1])  # OUTPUT = zyxwcuts\nprint(\"\\n\"*15)",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.sliceback",
        "documentation": {}
    },
    {
        "label": "greeting",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "peekOfCode": "greeting = \"Hello\"\nname = \"Michael\"\nprint(greeting + \" \" + name)\nprint(greeting + ' ' + name)\nage = 33\nprint(age)\nprint(type(greeting))\nprint(type(age))\nage_in_words = \"2 years\"\nprint(name + f\" is {age} years old\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "peekOfCode": "name = \"Michael\"\nprint(greeting + \" \" + name)\nprint(greeting + ' ' + name)\nage = 33\nprint(age)\nprint(type(greeting))\nprint(type(age))\nage_in_words = \"2 years\"\nprint(name + f\" is {age} years old\")\nprint(type(age))",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "peekOfCode": "age = 33\nprint(age)\nprint(type(greeting))\nprint(type(age))\nage_in_words = \"2 years\"\nprint(name + f\" is {age} years old\")\nprint(type(age))\nos.system(\"cls\")\nprint(f\"Pi is approximately {22 / 7:12.50f}\")\npi = 22 / 7",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "documentation": {}
    },
    {
        "label": "age_in_words",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "peekOfCode": "age_in_words = \"2 years\"\nprint(name + f\" is {age} years old\")\nprint(type(age))\nos.system(\"cls\")\nprint(f\"Pi is approximately {22 / 7:12.50f}\")\npi = 22 / 7\nprint(f\"Pi is approximately {pi:12.50f}\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "documentation": {}
    },
    {
        "label": "pi",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "peekOfCode": "pi = 22 / 7\nprint(f\"Pi is approximately {pi:12.50f}\")",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nprint(parrot[0:6:2])  # Nre\nprint(parrot[0:6:3])  # Nw\nnumber = \"9,223;372:036 854,775;807\"\nseparators = number[1::4]\nprint(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint([int(val) for val in values])",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "peekOfCode": "number = \"9,223;372:036 854,775;807\"\nseparators = number[1::4]\nprint(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint([int(val) for val in values])",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "documentation": {}
    },
    {
        "label": "separators",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "peekOfCode": "separators = number[1::4]\nprint(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint([int(val) for val in values])",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "description": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "peekOfCode": "values = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint([int(val) for val in values])",
        "detail": "Tim_Buchalka.python.Older.Girly_Voice.strings2",
        "documentation": {}
    },
    {
        "label": "available_exits",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.adventure",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.adventure",
        "peekOfCode": "available_exits = [\"north\", \"south\", \"east\", \"west\"]\nchosen_exit = \"\"\nwhile chosen_exit not in available_exits:\n    chosen_exit = input(\"Please choose a direction: \")\n    if chosen_exit.casefold() == \"quit\":\n        print(\"Game over\")\n        break\nprint(\"aren't you glad you got out of there\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.adventure",
        "documentation": {}
    },
    {
        "label": "chosen_exit",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.adventure",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.adventure",
        "peekOfCode": "chosen_exit = \"\"\nwhile chosen_exit not in available_exits:\n    chosen_exit = input(\"Please choose a direction: \")\n    if chosen_exit.casefold() == \"quit\":\n        print(\"Game over\")\n        break\nprint(\"aren't you glad you got out of there\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.adventure",
        "documentation": {}
    },
    {
        "label": "banner_text",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.banner",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.banner",
        "peekOfCode": "def banner_text(text: str = \" \", screen_width: int = 80) -> None:\n    \"\"\" Print a string centred, with ** either side.\n    :param text: The String to print.\n        An asterisk (*) will result in a row of asterisks.\n        The default will print a blank line, with a ** border at\n        the left and right edges.\n    :param screen_width: The overall width to print within\n        (including the 4 spaces for the ** either side).\n    :raises ValueError: if the supplied string is too long to fit.\n    \"\"\"",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.banner",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.blocks",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.blocks",
        "peekOfCode": "name = input(\"Please enter your name: \")\nage = int(input(\"How old are you, {0}? \".format(name)))\nprint(age)\n# if age >= 18:\n#     print(\"You are old enough to vote\")\n#     print(\"Please put an X in the box\")\n# else:\n#     print(\"Please come back in {0} years\".format(18 - age))\nif age < 18:\n    print(\"Please come back in {0} years\".format(18 - age))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.blocks",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.blocks",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.blocks",
        "peekOfCode": "age = int(input(\"How old are you, {0}? \".format(name)))\nprint(age)\n# if age >= 18:\n#     print(\"You are old enough to vote\")\n#     print(\"Please put an X in the box\")\n# else:\n#     print(\"Please come back in {0} years\".format(18 - age))\nif age < 18:\n    print(\"Please come back in {0} years\".format(18 - age))\nelif age == 900:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.blocks",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.checkingin",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.checkingin",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nletter = input(\"Enter a character: \")\nif letter in parrot:\n    print(\"{} is in {}\".format(letter, parrot))\nelse:\n    print(\"I don't need that letter\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.checkingin",
        "documentation": {}
    },
    {
        "label": "letter",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.checkingin",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.checkingin",
        "peekOfCode": "letter = input(\"Enter a character: \")\nif letter in parrot:\n    print(\"{} is in {}\".format(letter, parrot))\nelse:\n    print(\"I don't need that letter\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.checkingin",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.conditions",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.conditions",
        "peekOfCode": "age = int(input(\"How old are you? \"))\n# if age >= 16 and age <= 65:\n# if 16 <= age <= 65:\nif age in range(16, 66):\n    print(\"Have a good day at work\")\nelse:\n    print(\"Enjoy your free time\")\nprint(\"-\" * 80)\nif age < 16 or age > 65:\n    print(\"Enjoy your free time\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.conditions",
        "documentation": {}
    },
    {
        "label": "draw_axes",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "def draw_axes():\n    canvas.configure(scrollregion=(0, -y_origin, x_origin / 2, y_origin + label_height))\n    canvas.create_line(0, y_origin, x_origin, y_origin, width=2)\n    canvas.create_line(0, 0, 0, y_origin * 2, width=2)\ndef print_label(x, label):\n    canvas.create_text(x * bar_width * 2, y_origin, text=label, anchor='nw')\ndef draw_bar(x, y, bar_colour):\n    x_pos = x * bar_width * 2 + bar_width\n    y_height = y * bar_scaling\n    canvas.create_rectangle(x_pos - bar_width + bar_spacing, y_origin - 2, x_pos + bar_width, y_origin - y_height,",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "print_label",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "def print_label(x, label):\n    canvas.create_text(x * bar_width * 2, y_origin, text=label, anchor='nw')\ndef draw_bar(x, y, bar_colour):\n    x_pos = x * bar_width * 2 + bar_width\n    y_height = y * bar_scaling\n    canvas.create_rectangle(x_pos - bar_width + bar_spacing, y_origin - 2, x_pos + bar_width, y_origin - y_height,\n                            fill=bar_colour, outline=bar_colour)\ndef generate_year_month(now):\n    start_month = now.month - 11\n    start_year = now.year",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "draw_bar",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "def draw_bar(x, y, bar_colour):\n    x_pos = x * bar_width * 2 + bar_width\n    y_height = y * bar_scaling\n    canvas.create_rectangle(x_pos - bar_width + bar_spacing, y_origin - 2, x_pos + bar_width, y_origin - y_height,\n                            fill=bar_colour, outline=bar_colour)\ndef generate_year_month(now):\n    start_month = now.month - 11\n    start_year = now.year\n    if start_month < 1:\n        start_month += 12",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "generate_year_month",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "def generate_year_month(now):\n    start_month = now.month - 11\n    start_year = now.year\n    if start_month < 1:\n        start_month += 12\n        start_year -= 1\n    for count in range(12):\n        yield start_year, start_month\n        start_month += 1\n        if start_month > 12:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "main_window",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "main_window = tkinter.Tk()\nmain_window.title(\"USD Exchange Rates\")\nmain_window.geometry('1024x768')\ncanvas = tkinter.Canvas(main_window, width=800, height=600)\ncanvas.grid(row=1, column=0)\ncanvas.update()\nx_origin, y_origin = canvas.winfo_width(), canvas.winfo_height() / 2\nbar_width, bar_spacing, bar_scaling, label_height = 11, 4, 150, 40\ndraw_axes()\nbar_x = 0",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "canvas",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "canvas = tkinter.Canvas(main_window, width=800, height=600)\ncanvas.grid(row=1, column=0)\ncanvas.update()\nx_origin, y_origin = canvas.winfo_width(), canvas.winfo_height() / 2\nbar_width, bar_spacing, bar_scaling, label_height = 11, 4, 150, 40\ndraw_axes()\nbar_x = 0\ncurrent_date = datetime.datetime.utcnow()\nchart_data = [('AUD', 'blue'), ('GBP', 'red'), ('EUR', 'green')]\nfor year, month in generate_year_month(current_date):",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "bar_x",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "bar_x = 0\ncurrent_date = datetime.datetime.utcnow()\nchart_data = [('AUD', 'blue'), ('GBP', 'red'), ('EUR', 'green')]\nfor year, month in generate_year_month(current_date):\n    url = 'http://www.learnprogramming.academy/exchangerates/{0}-{1:02d}'.format(year, month)\n    try:\n        con = urllib_request.urlopen(urllib_request.Request(url, headers={'User-Agent': \"Magic Browser\"}))\n    except (urllib_HTTP_error, urllib_URL_error) as err:\n        print(\"The exchange rates site is currently unavailable, please try again later. {}\".format(err))\n    else:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "current_date",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "current_date = datetime.datetime.utcnow()\nchart_data = [('AUD', 'blue'), ('GBP', 'red'), ('EUR', 'green')]\nfor year, month in generate_year_month(current_date):\n    url = 'http://www.learnprogramming.academy/exchangerates/{0}-{1:02d}'.format(year, month)\n    try:\n        con = urllib_request.urlopen(urllib_request.Request(url, headers={'User-Agent': \"Magic Browser\"}))\n    except (urllib_HTTP_error, urllib_URL_error) as err:\n        print(\"The exchange rates site is currently unavailable, please try again later. {}\".format(err))\n    else:\n        data_values = con.read()",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "chart_data",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "chart_data = [('AUD', 'blue'), ('GBP', 'red'), ('EUR', 'green')]\nfor year, month in generate_year_month(current_date):\n    url = 'http://www.learnprogramming.academy/exchangerates/{0}-{1:02d}'.format(year, month)\n    try:\n        con = urllib_request.urlopen(urllib_request.Request(url, headers={'User-Agent': \"Magic Browser\"}))\n    except (urllib_HTTP_error, urllib_URL_error) as err:\n        print(\"The exchange rates site is currently unavailable, please try again later. {}\".format(err))\n    else:\n        data_values = con.read()\n        dict1 = json.loads(data_values.decode('utf-8'))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "row_y_position",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "row_y_position = 0\nfor currency, colour in chart_data:\n    canvas.create_text(x_origin / 2, row_y_position, text=currency, anchor='nw', fill=colour)\n    row_y_position += 20\necb_terms_of_use = tkinter.Label(main_window, text=\"From June 2018, data is averaged over the month\"\n                                                   \" from the ECB daily feed (rebased to USD)\")\necb_terms_of_use.grid(row=2, column=0)\nmain_window.mainloop()",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "ecb_terms_of_use",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "peekOfCode": "ecb_terms_of_use = tkinter.Label(main_window, text=\"From June 2018, data is averaged over the month\"\n                                                   \" from the ECB daily feed (rebased to USD)\")\necb_terms_of_use.grid(row=2, column=0)\nmain_window.mainloop()",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.exchange_chart",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.forloops",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.forloops",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nfor character in parrot:\n    print(character)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.forloops",
        "documentation": {}
    },
    {
        "label": "highest",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "peekOfCode": "highest = 10\nanswer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing\nprint(\"Please guess number between 1 and {}: \".format(highest))\nguess = int(input())\nif guess == answer:\n    print(\"You got it first time\")\nelse:\n    if guess < answer:\n        print(\"Please guess higher\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "peekOfCode": "answer = random.randint(1, highest)\nprint(answer)   # TODO: Remove after testing\nprint(\"Please guess number between 1 and {}: \".format(highest))\nguess = int(input())\nif guess == answer:\n    print(\"You got it first time\")\nelse:\n    if guess < answer:\n        print(\"Please guess higher\")\n    else:   # guess must be greater than answer",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "peekOfCode": "guess = int(input())\nif guess == answer:\n    print(\"You got it first time\")\nelse:\n    if guess < answer:\n        print(\"Please guess higher\")\n    else:   # guess must be greater than answer\n        print(\"Please guess lower\")\n    guess = int(input())\n    if guess == answer:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.guessinggame",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.ifchallenge",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.ifchallenge",
        "peekOfCode": "name = input(\"Please enter your name: \")\nage = int(input(\"How old are you? \"))\nif 18 <= age < 31:\n    print(\"Welcome to club 18-30 holidays, {0}\".format(name))\nelse:\n    print(\"I'm sorry, our holidays are only for cool people\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.ifchallenge",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.ifchallenge",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.ifchallenge",
        "peekOfCode": "age = int(input(\"How old are you? \"))\nif 18 <= age < 31:\n    print(\"Welcome to club 18-30 holidays, {0}\".format(name))\nelse:\n    print(\"I'm sorry, our holidays are only for cool people\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.ifchallenge",
        "documentation": {}
    },
    {
        "label": "activity",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.notin",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.notin",
        "peekOfCode": "activity = input(\"What would you like to do today? \")\nif \"cinema\" not in activity.casefold():\n    print(\"But I want to go to the cinema\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.notin",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "peekOfCode": "shopping_list = [\"milk\", \"pasta\", \"eggs\", \"spam\", \"bread\", \"rice\"]\nitem_to_find = \"spam\"\nfound_at = None\n# for index in range(6):\n# for index in range(len(shopping_list)):\n#     if shopping_list[index] == item_to_find:\n#         found_at = index\n#         break\nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "documentation": {}
    },
    {
        "label": "item_to_find",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "peekOfCode": "item_to_find = \"spam\"\nfound_at = None\n# for index in range(6):\n# for index in range(len(shopping_list)):\n#     if shopping_list[index] == item_to_find:\n#         found_at = index\n#         break\nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\nif found_at is not None:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "documentation": {}
    },
    {
        "label": "found_at",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "peekOfCode": "found_at = None\n# for index in range(6):\n# for index in range(len(shopping_list)):\n#     if shopping_list[index] == item_to_find:\n#         found_at = index\n#         break\nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\nif found_at is not None:\n    print(\"Item found at position {}\".format(found_at))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.searching",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.shopping",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.shopping",
        "peekOfCode": "shopping_list = [\"milk\", \"pasta\", \"eggs\", \"spam\", \"bread\", \"rice\"]\nfor item in shopping_list:\n    if item == \"spam\":\n        break\n    print(\"Buy \" + item)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.shopping",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "peekOfCode": "number = input(\"Please enter a series of numbers, using any separators you like: \")\nseparators = \"\"\nfor char in number:\n    if not char.isnumeric():\n        separators = separators + char\n# print(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint(sum([int(val) for val in values]))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "documentation": {}
    },
    {
        "label": "separators",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "peekOfCode": "separators = \"\"\nfor char in number:\n    if not char.isnumeric():\n        separators = separators + char\n# print(separators)\nvalues = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint(sum([int(val) for val in values]))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "documentation": {}
    },
    {
        "label": "values",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "peekOfCode": "values = \"\".join(char if char not in separators else \" \" for char in number).split()\nprint(sum([int(val) for val in values]))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.strings2",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.truefalse",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.truefalse",
        "peekOfCode": "name = input(\"Please enter your name: \")\n# if name:\nif name != \"\":\n    print(\"Hello, {}\".format(name))\nelse:\n    print(\"Are you the man with no name?\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.truefalse",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow.whileloop",
        "description": "Tim_Buchalka.python.Older.ProgramFlow.whileloop",
        "peekOfCode": "i = 0\nwhile True:\n    print(\"i is now {}\".format(i))\ni += 1",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow.whileloop",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "peekOfCode": "number = 5\nmultiplier = 8\nanswer = 0\n# add your loop after this comment",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "documentation": {}
    },
    {
        "label": "multiplier",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "peekOfCode": "multiplier = 8\nanswer = 0\n# add your loop after this comment",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "peekOfCode": "answer = 0\n# add your loop after this comment",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.aa",
        "documentation": {}
    },
    {
        "label": "available_exits",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.adventure",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.adventure",
        "peekOfCode": "available_exits = [\"north\", \"south\", \"east\", \"west\"]\nchosen_exit = \"\"\nwhile chosen_exit not in available_exits:\n    chosen_exit = input(\"Please choose a direction: \")\n    if chosen_exit.casefold() == \"quit\":\n        print(\"Game over\")\n        break\nelse:\n    print(\"aren't you glad you got out of there\")\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.adventure",
        "documentation": {}
    },
    {
        "label": "chosen_exit",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.adventure",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.adventure",
        "peekOfCode": "chosen_exit = \"\"\nwhile chosen_exit not in available_exits:\n    chosen_exit = input(\"Please choose a direction: \")\n    if chosen_exit.casefold() == \"quit\":\n        print(\"Game over\")\n        break\nelse:\n    print(\"aren't you glad you got out of there\")\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.adventure",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.blocks",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.blocks",
        "peekOfCode": "name = input(\"Please enter your name: \")\nage = int(input(\"How old are you, {}? \".format(name)))\nprint(age)\nif age >= 18:\n    print(\"You are old enough to vote\")\n    print(\"Please put an X in the box\")\n    print(\"*\" * 50)\nelse:\n    print(\"Please come back in {} years\".format(18 - age))\n    print(\"*\" * 50)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.blocks",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.blocks",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.blocks",
        "peekOfCode": "age = int(input(\"How old are you, {}? \".format(name)))\nprint(age)\nif age >= 18:\n    print(\"You are old enough to vote\")\n    print(\"Please put an X in the box\")\n    print(\"*\" * 50)\nelse:\n    print(\"Please come back in {} years\".format(18 - age))\n    print(\"*\" * 50)\nif age < 18:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.blocks",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.checkingin",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.checkingin",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nletter = input(\"Enter a character: \")\n# letter = letter.title()\nif letter in parrot:\n    print(\"{} is in {}\".format(letter, parrot))\nelse:\n    print(\"I don't need that letter\")\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.checkingin",
        "documentation": {}
    },
    {
        "label": "letter",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.checkingin",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.checkingin",
        "peekOfCode": "letter = input(\"Enter a character: \")\n# letter = letter.title()\nif letter in parrot:\n    print(\"{} is in {}\".format(letter, parrot))\nelse:\n    print(\"I don't need that letter\")\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.checkingin",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.conditions",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.conditions",
        "peekOfCode": "age = int(input(\"How old are you? \"))\n# if age >= 16 and age <= 65:\n# if 16 <= age <= 65:\nif age in range(16,66):\n    print(\"Have a good day at work\")\nelse:\n    print(\"Enjoy your free time\")\nprint(\"-\" * 80)\nif age < 16 or age > 65:\n    print(\"Enjoy your free time\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.conditions",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.contrive",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.contrive",
        "peekOfCode": "numbers = [1, 45, 32, 12 , 60]\nfor number in numbers:\n    if number % 8 == 0:\n        print(\"The numbers are unacceptable\")\n        break\nelse:\n    print(\"All those numbers are fine\")\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.contrive",
        "documentation": {}
    },
    {
        "label": "parrot",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.forloops",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.forloops",
        "peekOfCode": "parrot = \"Norwegian Blue\"\nfor character in parrot:\n    print(character)\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.forloops",
        "documentation": {}
    },
    {
        "label": "get_integer",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "peekOfCode": "def get_integer(prompt):\n    \"\"\"\n    Get an integer from Standard Input (stdin).\n    The function will continue looping, and prompting\n    the user, until a valid `int` is entered.\n    :param prompt: The String that the user will see, when\n        they're prompted to enter the value.\n    :return: The integer that the user enters.\n    \"\"\"\n    while True:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "documentation": {}
    },
    {
        "label": "highest",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "peekOfCode": "highest = 1000\nanswer = random.randint(1,highest)#Return random integer in range [a, b], including both end points.\nprint(answer)   #TODO: Remove after\nguess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess a number between 1 and {}: \".format(highest))\nwhile guess != answer:\n guess = get_integer(\": \")\n if guess == 0:\n    break\n if guess == answer:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "peekOfCode": "answer = random.randint(1,highest)#Return random integer in range [a, b], including both end points.\nprint(answer)   #TODO: Remove after\nguess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess a number between 1 and {}: \".format(highest))\nwhile guess != answer:\n guess = get_integer(\": \")\n if guess == 0:\n    break\n if guess == answer:\n     print(\"Well done, you guessed it \")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "documentation": {}
    },
    {
        "label": "guess",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "peekOfCode": "guess = 0 # initialise to any number that doesn't equal the answer\nprint(\"Please guess a number between 1 and {}: \".format(highest))\nwhile guess != answer:\n guess = get_integer(\": \")\n if guess == 0:\n    break\n if guess == answer:\n     print(\"Well done, you guessed it \")\n     break\n else:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.guessinggame",
        "documentation": {}
    },
    {
        "label": "low",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "peekOfCode": "low = 1\nhigh = 1000\nprint(\"Please think of a number between {} and {}:\".format(low, high))\ninput(\"Press ENTER to start \")\nguesses = 1 \nwhile True:\n    print(\"\\tGuessing in the range of {} to {} \".format(low, high))\n    guess = low + (high - low) // 2\n    high_low = input(\"My guess is {}. Should I guess higher or lower? \"\n                     \"Enter h or l, or c if my guess was correct \"",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "documentation": {}
    },
    {
        "label": "high",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "peekOfCode": "high = 1000\nprint(\"Please think of a number between {} and {}:\".format(low, high))\ninput(\"Press ENTER to start \")\nguesses = 1 \nwhile True:\n    print(\"\\tGuessing in the range of {} to {} \".format(low, high))\n    guess = low + (high - low) // 2\n    high_low = input(\"My guess is {}. Should I guess higher or lower? \"\n                     \"Enter h or l, or c if my guess was correct \"\n                      .format(guess)).casefold()",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "documentation": {}
    },
    {
        "label": "guesses",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "peekOfCode": "guesses = 1 \nwhile True:\n    print(\"\\tGuessing in the range of {} to {} \".format(low, high))\n    guess = low + (high - low) // 2\n    high_low = input(\"My guess is {}. Should I guess higher or lower? \"\n                     \"Enter h or l, or c if my guess was correct \"\n                      .format(guess)).casefold()\n    if high_low == \"h\":\n        #Guess higher. The low end of the range becomes 1 greater than the guess.\n        low = guess + 1",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.hilowgame",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.ifchallenge",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.ifchallenge",
        "peekOfCode": "name = input(\"What is your name? \")\nage = int(input(\"Hello {0}, how old are you? \".format(name)))\nif age >= 18 and age <= 30:\n    print(\"Welcome to the holiday\")\nelse:\n    print(\"I'm sorry {}, you can't come\".format(name))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.ifchallenge",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.ifchallenge",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.ifchallenge",
        "peekOfCode": "age = int(input(\"Hello {0}, how old are you? \".format(name)))\nif age >= 18 and age <= 30:\n    print(\"Welcome to the holiday\")\nelse:\n    print(\"I'm sorry {}, you can't come\".format(name))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.ifchallenge",
        "documentation": {}
    },
    {
        "label": "activity",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.notin",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.notin",
        "peekOfCode": "activity = input(\"What would you like to do today? \")\n# .casefold() = Return a version of the string suitable for caseless comparisons\nif \"cinema\" not in activity.casefold():\n    print(\"But I want to go to the cinema.\")\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.notin",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "peekOfCode": "shopping_list = [\"milk\", \"pasta\", \"eggs\", \"spam\", \"bread\", \"rice\"]\nitem_to_find = \"spam\"\nfound_at = None #stores the position of \"spam\" in the list\n# for index in range(6):\n# for index in range(len(shopping_list)):\n#     if shopping_list[index] == item_to_find:\n#         found_at = index\n#         break\nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "documentation": {}
    },
    {
        "label": "item_to_find",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "peekOfCode": "item_to_find = \"spam\"\nfound_at = None #stores the position of \"spam\" in the list\n# for index in range(6):\n# for index in range(len(shopping_list)):\n#     if shopping_list[index] == item_to_find:\n#         found_at = index\n#         break\nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\nif found_at is not None:",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "documentation": {}
    },
    {
        "label": "found_at",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "peekOfCode": "found_at = None #stores the position of \"spam\" in the list\n# for index in range(6):\n# for index in range(len(shopping_list)):\n#     if shopping_list[index] == item_to_find:\n#         found_at = index\n#         break\nif item_to_find in shopping_list:\n    found_at = shopping_list.index(item_to_find)\nif found_at is not None:\n    print(\"Item found at position {}\".format(found_at))",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.searching",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.shopping",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.shopping",
        "peekOfCode": "shopping_list = [\"milk\", \"pasta\", \"eggs\", \"spam\", \"bread\", \"rice\"]\n# for item in shopping_list:\n#     if item != \"spam\":\n#       print(\"Buy \" + item )\nfor item in shopping_list:\n    if item == \"spam\":\n        break\n    print(\"Buy \" + item)\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.shopping",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.summarychallenge",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.summarychallenge",
        "peekOfCode": "choice = \"-\"\nwhile choice != \"0\":  \n    if choice in \"12345\":\n        print(\"You chose {}\".format(choice))\n    else:\n        print(\"Please choose your options from the list below:\")\n        print(\"1:\\tLearn Python\")\n        print(\"2:\\tLearn Java\")\n        print(\"3:\\tGo swimming\")\n        print(\"4:\\tHave dinner\")",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.summarychallenge",
        "documentation": {}
    },
    {
        "label": "sum",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.truefalse",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.truefalse",
        "peekOfCode": "def sum():\n day = \"Friday\"\n temperature = 32\n raining = False\n # when you use () you don't need to worry if and has a higher value than or#\n if (day == \"Saturday\" and temperature > 27) or not raining:\n     print(\"Go swimming\")\n else:\n     print(\"Learn Python\")\n day = \"Studying\"",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.truefalse",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.truefalse",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.truefalse",
        "peekOfCode": "name = input(\"Please enter your name: \")\n# if name:\nif name != \"\":\n   print(\"Hello, {}\".format(name))\nelse:\n   print(\"Are you the man with no name?\")\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.truefalse",
        "documentation": {}
    },
    {
        "label": "i",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.ProgramFlow1.whileloop",
        "description": "Tim_Buchalka.python.Older.ProgramFlow1.whileloop",
        "peekOfCode": "i = 0 # this is a place holder for the value i\nwhile i < 10: # this loop will keep going until i is greater than 10\n    print(\"i is now {}\".format(i))\n    i += 1",
        "detail": "Tim_Buchalka.python.Older.ProgramFlow1.whileloop",
        "documentation": {}
    },
    {
        "label": "rollDice",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "def rollDice(side):\n    result = random.randint(1,side)\n    return result\ndef health():\n    healthStat = ((rollDice(6)*rollDice(12))/2)\n    return healthStat\ndef strenght():\n    strengthStat = ((rollDice(6)*rollDice(8))/2)+12\n    return strengthStat\nprint(\"⚔️ BATTLE TIME ⚔️\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "health",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "def health():\n    healthStat = ((rollDice(6)*rollDice(12))/2)\n    return healthStat\ndef strenght():\n    strengthStat = ((rollDice(6)*rollDice(8))/2)+12\n    return strengthStat\nprint(\"⚔️ BATTLE TIME ⚔️\")\nprint()\nc1Name = input(\"Name your Legend:\\n\")\nc1Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "strenght",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "def strenght():\n    strengthStat = ((rollDice(6)*rollDice(8))/2)+12\n    return strengthStat\nprint(\"⚔️ BATTLE TIME ⚔️\")\nprint()\nc1Name = input(\"Name your Legend:\\n\")\nc1Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()\nprint(c1Name)\nc1Health = health()",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c1Name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c1Name = input(\"Name your Legend:\\n\")\nc1Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()\nprint(c1Name)\nc1Health = health()\nc1Strength = strenght()\nprint(\"HEALTH:\", c1Health )\nprint(\"STRENGTH:\",c1Strength )\nprint()\nprint(\"Who are they battling?\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c1Type",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c1Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()\nprint(c1Name)\nc1Health = health()\nc1Strength = strenght()\nprint(\"HEALTH:\", c1Health )\nprint(\"STRENGTH:\",c1Strength )\nprint()\nprint(\"Who are they battling?\")\nprint()",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c1Health",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c1Health = health()\nc1Strength = strenght()\nprint(\"HEALTH:\", c1Health )\nprint(\"STRENGTH:\",c1Strength )\nprint()\nprint(\"Who are they battling?\")\nprint()\nc2Name = input(\"Name your Legend:\\n\")\nc2Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c1Strength",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c1Strength = strenght()\nprint(\"HEALTH:\", c1Health )\nprint(\"STRENGTH:\",c1Strength )\nprint()\nprint(\"Who are they battling?\")\nprint()\nc2Name = input(\"Name your Legend:\\n\")\nc2Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()\nprint(c2Name)",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c2Name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c2Name = input(\"Name your Legend:\\n\")\nc2Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()\nprint(c2Name)\nc2Health = health()\nc2Strength = strenght()\nprint(\"HEALTH:\", c2Health )\nprint(\"STRENGTH:\",c2Strength )\nprint()\nround = 1",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c2Type",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c2Type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\nprint()\nprint(c2Name)\nc2Health = health()\nc2Strength = strenght()\nprint(\"HEALTH:\", c2Health )\nprint(\"STRENGTH:\",c2Strength )\nprint()\nround = 1\nwinner = None",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c2Health",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c2Health = health()\nc2Strength = strenght()\nprint(\"HEALTH:\", c2Health )\nprint(\"STRENGTH:\",c2Strength )\nprint()\nround = 1\nwinner = None\nwhile True:\n  time.sleep(1)\n  os.system(\"cls\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "c2Strength",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "c2Strength = strenght()\nprint(\"HEALTH:\", c2Health )\nprint(\"STRENGTH:\",c2Strength )\nprint()\nround = 1\nwinner = None\nwhile True:\n  time.sleep(1)\n  os.system(\"cls\")\n  print(\"⚔️ BATTLE TIME ⚔️\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "round",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "round = 1\nwinner = None\nwhile True:\n  time.sleep(1)\n  os.system(\"cls\")\n  print(\"⚔️ BATTLE TIME ⚔️\")\n  print()\n  print(\"The battle begins!\")  \n  c1Dice = rollDice(6)\n  c2Dice = rollDice(6)  ",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "winner",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "peekOfCode": "winner = None\nwhile True:\n  time.sleep(1)\n  os.system(\"cls\")\n  print(\"⚔️ BATTLE TIME ⚔️\")\n  print()\n  print(\"The battle begins!\")  \n  c1Dice = rollDice(6)\n  c2Dice = rollDice(6)  \n  difference = abs(c1Strength - c2Strength) + 1  ",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game-Balwraith",
        "documentation": {}
    },
    {
        "label": "rollDice",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game",
        "peekOfCode": "def rollDice(side):\n  result = random.randint(1,side)\n  return result\ndef health():\n  healthStat = ((rollDice(6)*rollDice(12))/2)+10\n  return healthStat\ndef strenght():\n  strengthStat = ((rollDice(6)*rollDice(8))/2)+12\n  return strengthStat\nwhile True:",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game",
        "documentation": {}
    },
    {
        "label": "health",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game",
        "peekOfCode": "def health():\n  healthStat = ((rollDice(6)*rollDice(12))/2)+10\n  return healthStat\ndef strenght():\n  strengthStat = ((rollDice(6)*rollDice(8))/2)+12\n  return strengthStat\nwhile True:\n  print(\"⚔️ CHARACTER BUILDER ⚔️\")\n  print()\n  name = input(\"Name your Legend:\\n\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game",
        "documentation": {}
    },
    {
        "label": "strenght",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Game",
        "description": "Tim_Buchalka.python.Older.Projects.py.Game",
        "peekOfCode": "def strenght():\n  strengthStat = ((rollDice(6)*rollDice(8))/2)+12\n  return strengthStat\nwhile True:\n  print(\"⚔️ CHARACTER BUILDER ⚔️\")\n  print()\n  name = input(\"Name your Legend:\\n\")\n  type = input(\"Character Type (Human, Elf, Wizard or Orc):\\n\")\n  print()\n  print(name)",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Game",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Login_System",
        "description": "Tim_Buchalka.python.Older.Projects.py.Login_System",
        "peekOfCode": "counter = 0\nwhile counter < 3:\n   user_name = input(\"What is your username: \").lower()\n   password = input(\"What is your password: \").lower()\n   if user_name == \"michael\" and password == \"password\":\n      print(\"Welcom to Replit\")\n   elif user_name == \"david\" and password == \"trash\":\n      print(\"Welcom to Replit\")\n   elif user_name == \"james\" and password == \"bond\":\n      print(\"Welcom to Replit\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Login_System",
        "documentation": {}
    },
    {
        "label": "correct_num",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.One_Million-To-One",
        "description": "Tim_Buchalka.python.Older.Projects.py.One_Million-To-One",
        "peekOfCode": "correct_num = random.randint(1,100000000)\nguess_count = 0\nwhile True:\n      print(correct_num)\n      guess = int(input(\"Guess a number?: \"))\n      if guess < 0:\n        print(\"I'm done I don't want to play this anymore\")\n        exit()\n      elif guess < correct_num:\n          print(\"Too low\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.One_Million-To-One",
        "documentation": {}
    },
    {
        "label": "guess_count",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.One_Million-To-One",
        "description": "Tim_Buchalka.python.Older.Projects.py.One_Million-To-One",
        "peekOfCode": "guess_count = 0\nwhile True:\n      print(correct_num)\n      guess = int(input(\"Guess a number?: \"))\n      if guess < 0:\n        print(\"I'm done I don't want to play this anymore\")\n        exit()\n      elif guess < correct_num:\n          print(\"Too low\")\n          guess_count += 1",
        "detail": "Tim_Buchalka.python.Older.Projects.py.One_Million-To-One",
        "documentation": {}
    },
    {
        "label": "high",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "description": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "peekOfCode": "high = 10\nlow = 0\ncount = low\nwhile count < high:\n    num = input(\"Pick a number between {} and {} \".format(low,high))\n    num = int(num)+ high % high\n    print(num)\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "documentation": {}
    },
    {
        "label": "low",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "description": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "peekOfCode": "low = 0\ncount = low\nwhile count < high:\n    num = input(\"Pick a number between {} and {} \".format(low,high))\n    num = int(num)+ high % high\n    print(num)\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "documentation": {}
    },
    {
        "label": "count",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "description": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "peekOfCode": "count = low\nwhile count < high:\n    num = input(\"Pick a number between {} and {} \".format(low,high))\n    num = int(num)+ high % high\n    print(num)\nprint(\"\\n\"*2)",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Pratice",
        "documentation": {}
    },
    {
        "label": "wrong",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Spelling_game",
        "description": "Tim_Buchalka.python.Older.Projects.py.Spelling_game",
        "peekOfCode": "wrong = ('''\n        ,-~***~-._.-~***~-.\n       /                   \\\n      / .--~~~--..--~~~--.  \\\n    ,' /._,/\\._,/\\._,/\\._,\\  `.\n   ~-. \\.-~      .-~      // ,-~\n      \\/  ,*    /     ,* // /    the  R O L L I N G   S T O N E S\n      / ,**'   /     ,*'// /\n     /,***'   /    ,**'// /\n    /,***'   /    ,**'// /",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Spelling_game",
        "documentation": {}
    },
    {
        "label": "spelling_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.Spelling_game",
        "description": "Tim_Buchalka.python.Older.Projects.py.Spelling_game",
        "peekOfCode": "spelling_list = [\"yoga\",\"adult\",\"adopt\",\"delta\",\"alone\"]\nfor words in list(spelling_list):\n    word1 = input(\"Can you help me figure out what word this is?: agoy \")\n    if word1 == \"yoga\":\n        print(right)\n        break\n    else:\n        print(wrong)\n        continue  \nfor words in list(spelling_list):",
        "detail": "Tim_Buchalka.python.Older.Projects.py.Spelling_game",
        "documentation": {}
    },
    {
        "label": "correct_num",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Projects.py.while_true",
        "description": "Tim_Buchalka.python.Older.Projects.py.while_true",
        "peekOfCode": "correct_num = random.randint(1,100000000)\nwhile True:\n    print(correct_num)\n    guess = int(input(\"Guess a number?: \"))\n    if guess < correct_num:\n        print(\"Too low\")\n    elif guess > correct_num:\n        print(\"Too high\")\n    elif guess == correct_num:\n        print(\"Correct!\")",
        "detail": "Tim_Buchalka.python.Older.Projects.py.while_true",
        "documentation": {}
    },
    {
        "label": "available_parts",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "description": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "peekOfCode": "available_parts = [\"computer\",\n                   \"monitor\",\n                   \"keyboard\",\n                   \"mouse\",\n                   \"hdmi cable\",\n                   \"dvd drive\"\n                   ]\n# valid_choices = [str(i) for i in range(1, len(available_parts) + 1)]\nvalid_choices = []\nfor i in range(1, len(available_parts) + 1):",
        "detail": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "documentation": {}
    },
    {
        "label": "valid_choices",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "description": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "peekOfCode": "valid_choices = []\nfor i in range(1, len(available_parts) + 1):\n    valid_choices.append(str(i))  \nprint(valid_choices)        \ncurrent_choice = \"-\"\ncomputer_parts = []\nwhile current_choice != \"0\":\n    if current_choice in valid_choices:\n        index = int(current_choice) - 1\n        chosen_part = available_parts[index]",
        "detail": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "documentation": {}
    },
    {
        "label": "current_choice",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "description": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "peekOfCode": "current_choice = \"-\"\ncomputer_parts = []\nwhile current_choice != \"0\":\n    if current_choice in valid_choices:\n        index = int(current_choice) - 1\n        chosen_part = available_parts[index]\n        if chosen_part in computer_parts:\n            # it's already in, so remoe it\n            print(\"Removing {}\".format(current_choice))\n            computer_parts.remove(chosen_part)",
        "detail": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "documentation": {}
    },
    {
        "label": "computer_parts",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "description": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "peekOfCode": "computer_parts = []\nwhile current_choice != \"0\":\n    if current_choice in valid_choices:\n        index = int(current_choice) - 1\n        chosen_part = available_parts[index]\n        if chosen_part in computer_parts:\n            # it's already in, so remoe it\n            print(\"Removing {}\".format(current_choice))\n            computer_parts.remove(chosen_part)\n        else:",
        "detail": "Tim_Buchalka.python.Older.Sequences.buy_computer",
        "documentation": {}
    },
    {
        "label": "choice",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.demo",
        "description": "Tim_Buchalka.python.Older.Sequences.demo",
        "peekOfCode": "choice = input(\"\"\"Please choose your album (invalid choice exits):\n1: Welcome to my Nightmare\"\n2: Bad Company\"\n3: Nightflight\"\n4: More Mayhem \"\"\")\nprint(choice)\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.demo",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "description": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "peekOfCode": "data = [104, 101, 4, 105, 308, 103, 5, \n        107, 100, 306, 106, 102, 108]\nmin_vlaid = 100\nmax_vlaid = 200\n#                             #start,stop,step\n# for index in range(len(data) - 1, -1, -1):\n#     if data[index] < min_vlaid or data[index] > max_valid:\n#         print(index, data)\n#         del data[index]\ntop_index = len(data) - 1",
        "detail": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "documentation": {}
    },
    {
        "label": "min_vlaid",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "description": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "peekOfCode": "min_vlaid = 100\nmax_vlaid = 200\n#                             #start,stop,step\n# for index in range(len(data) - 1, -1, -1):\n#     if data[index] < min_vlaid or data[index] > max_valid:\n#         print(index, data)\n#         del data[index]\ntop_index = len(data) - 1\nfor index, value in enumerate(reversed(data)):\n    if value < min_vlaid or value > max_vlaid:",
        "detail": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "documentation": {}
    },
    {
        "label": "max_vlaid",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "description": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "peekOfCode": "max_vlaid = 200\n#                             #start,stop,step\n# for index in range(len(data) - 1, -1, -1):\n#     if data[index] < min_vlaid or data[index] > max_valid:\n#         print(index, data)\n#         del data[index]\ntop_index = len(data) - 1\nfor index, value in enumerate(reversed(data)):\n    if value < min_vlaid or value > max_vlaid:\n        print(top_index - index, value)",
        "detail": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "documentation": {}
    },
    {
        "label": "top_index",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "description": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "peekOfCode": "top_index = len(data) - 1\nfor index, value in enumerate(reversed(data)):\n    if value < min_vlaid or value > max_vlaid:\n        print(top_index - index, value)\n        del data[top_index - index]\nprint()\nprint(data)\nprint(\"\\n\"*1)",
        "detail": "Tim_Buchalka.python.Older.Sequences.gobackwards",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.immutable",
        "description": "Tim_Buchalka.python.Older.Sequences.immutable",
        "peekOfCode": "result = \"Correct\"\nanother_result = result\nprint(result)\nprint(another_result)\nresult += \"ish\"\nprint(id(result))\nprint()\nprint(another_result)",
        "detail": "Tim_Buchalka.python.Older.Sequences.immutable",
        "documentation": {}
    },
    {
        "label": "another_result",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.immutable",
        "description": "Tim_Buchalka.python.Older.Sequences.immutable",
        "peekOfCode": "another_result = result\nprint(result)\nprint(another_result)\nresult += \"ish\"\nprint(id(result))\nprint()\nprint(another_result)",
        "detail": "Tim_Buchalka.python.Older.Sequences.immutable",
        "documentation": {}
    },
    {
        "label": "flowers",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "description": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "peekOfCode": "flowers = [\n    \"Daffodil\",\n    \"Evening Primrose\",\n    \"Hydrangea\",\n    \"Iris\",\n    \"Lavender\",\n    \"Sunflower\",\n    \"Tiger Lily\",\n]\n# for flower in flowers:",
        "detail": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "documentation": {}
    },
    {
        "label": "separator",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "description": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "peekOfCode": "separator = \", \"\noutput = separator.join(flowers)\nprint(output)\nprint(\",\".join(flowers))\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "documentation": {}
    },
    {
        "label": "output",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "description": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "peekOfCode": "output = separator.join(flowers)\nprint(output)\nprint(\",\".join(flowers))\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.joining_things",
        "documentation": {}
    },
    {
        "label": "SONGS_LIST_INDEX",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.jukebox_menu",
        "description": "Tim_Buchalka.python.Older.Sequences.jukebox_menu",
        "peekOfCode": "SONGS_LIST_INDEX = 3\nSONG_TITLE_INDEX = 1\nwhile True:\n    print(\"Please choose your album (invalid choice exits):\")\n    for index, (title, artist, year, songs) in enumerate(albums):\n        print(\"{}: {}\".format(index + 1, title))\n    choice = int(input())\n    if 1 <= choice <= len(albums):\n        songs_list = albums[choice -1][SONGS_LIST_INDEX]\n    else:",
        "detail": "Tim_Buchalka.python.Older.Sequences.jukebox_menu",
        "documentation": {}
    },
    {
        "label": "SONG_TITLE_INDEX",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.jukebox_menu",
        "description": "Tim_Buchalka.python.Older.Sequences.jukebox_menu",
        "peekOfCode": "SONG_TITLE_INDEX = 1\nwhile True:\n    print(\"Please choose your album (invalid choice exits):\")\n    for index, (title, artist, year, songs) in enumerate(albums):\n        print(\"{}: {}\".format(index + 1, title))\n    choice = int(input())\n    if 1 <= choice <= len(albums):\n        songs_list = albums[choice -1][SONGS_LIST_INDEX]\n    else:\n        continue",
        "detail": "Tim_Buchalka.python.Older.Sequences.jukebox_menu",
        "documentation": {}
    },
    {
        "label": "computer_parts",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.lists_intro",
        "description": "Tim_Buchalka.python.Older.Sequences.lists_intro",
        "peekOfCode": "computer_parts = [\"computer\",\n                   \"monitor\",\n                    \"keyboard\",\n                    \"mouse\",\n                    \"mouse mat\"\n                    ]\nprint(computer_parts)\n#item in place 3 in the list computer_parts is replaced with trackball\n# computer_parts[3] = \"trackball\"\nprint(computer_parts[3:])",
        "detail": "Tim_Buchalka.python.Older.Sequences.lists_intro",
        "documentation": {}
    },
    {
        "label": "computer_parts[3:]",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.lists_intro",
        "description": "Tim_Buchalka.python.Older.Sequences.lists_intro",
        "peekOfCode": "computer_parts[3:] = [\"tackball\"]#this get rid of item 3 on and replaces it with trackball\nprint(computer_parts)\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.lists_intro",
        "documentation": {}
    },
    {
        "label": "name",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.moreprint",
        "description": "Tim_Buchalka.python.Older.Sequences.moreprint",
        "peekOfCode": "name = \"Michael\"\nage = 10\nprint(name, age, \"Python\", 2020)\nprint((name, age, \"Python\", 2020))\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.moreprint",
        "documentation": {}
    },
    {
        "label": "age",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.moreprint",
        "description": "Tim_Buchalka.python.Older.Sequences.moreprint",
        "peekOfCode": "age = 10\nprint(name, age, \"Python\", 2020)\nprint((name, age, \"Python\", 2020))\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.moreprint",
        "documentation": {}
    },
    {
        "label": "shopping_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.mutable",
        "description": "Tim_Buchalka.python.Older.Sequences.mutable",
        "peekOfCode": "shopping_list = [\"milk\",\n                 \"pasta\",\n                 \"eggs\",\n                 \"bread\",\n                 \"rice\"\n                 ]\nanother_list = shopping_list\nprint(id(shopping_list))\nprint(id(another_list))\nshopping_list += [\"cookies\"]#adds cookies to the shopping_list",
        "detail": "Tim_Buchalka.python.Older.Sequences.mutable",
        "documentation": {}
    },
    {
        "label": "another_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.mutable",
        "description": "Tim_Buchalka.python.Older.Sequences.mutable",
        "peekOfCode": "another_list = shopping_list\nprint(id(shopping_list))\nprint(id(another_list))\nshopping_list += [\"cookies\"]#adds cookies to the shopping_list\nprint(shopping_list)\nprint(id(shopping_list))\nprint(another_list)\na = b = c = d = e = f = another_list\nprint(a)\nprint(\"Adding cream\")",
        "detail": "Tim_Buchalka.python.Older.Sequences.mutable",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.mutable",
        "description": "Tim_Buchalka.python.Older.Sequences.mutable",
        "peekOfCode": "a = b = c = d = e = f = another_list\nprint(a)\nprint(\"Adding cream\")\nb.append(\"cream\")\nprint(c)\nprint(d)\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.mutable",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.nested_data",
        "description": "Tim_Buchalka.python.Older.Sequences.nested_data",
        "peekOfCode": "albums = [\n    (\"Welcome to my Nightmare\", \"Alice Cooper\", 1975,\n     [\n         (1, \"Welcome to my Nightmare\"),\n         (2, \"Devil's Food\"),\n         (3, \"The Black Widow\"),\n         (4, \"Some Folks\"),\n         (5, \"Only Women Bleed\"),\n     ]\n     ),",
        "detail": "Tim_Buchalka.python.Older.Sequences.nested_data",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.nospam",
        "description": "Tim_Buchalka.python.Older.Sequences.nospam",
        "peekOfCode": "menu = [\n    [\"egg\", \"bacon\"],\n    [\"egg\", \"sausage\", \"bacon\"], \n    [\"egg\", \"spam\"], \n    [\"egg\", \"bacon\", \"spam\"],\n    [\"spam\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"egg\", \"spam\", \"spam\", \"bacon\", \"spam\"],\n    [\"spam\", \"sausage\", \"spam\", \"bacon\", \"spam\", \"tomato\", \"spam\"],\n]\n# for meal in menu:",
        "detail": "Tim_Buchalka.python.Older.Sequences.nospam",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.nospam_gen",
        "description": "Tim_Buchalka.python.Older.Sequences.nospam_gen",
        "peekOfCode": "menu = [\n    [\"egg\", \"bacon\"],\n    [\"egg\", \"sausage\", \"bacon\"], \n    [\"egg\", \"spam\"], \n    [\"egg\", \"bacon\", \"spam\"],\n    [\"spam\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"egg\", \"spam\", \"spam\", \"bacon\", \"spam\"],\n    [\"spam\", \"sausage\", \"spam\", \"bacon\", \"spam\", \"tomato\", \"spam\"],\n]\nfor meal in menu:",
        "detail": "Tim_Buchalka.python.Older.Sequences.nospam_gen",
        "documentation": {}
    },
    {
        "label": "empty_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "description": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "peekOfCode": "empty_list = []\neven = [2, 4, 6, 8]\nodd = [1, 3, 5, 7, 9]\nnumbers = [even, odd]\nprint(numbers)\nfor number_list in numbers:\n    print(number_list)\n    for value in number_list:\n        print(value)",
        "detail": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "documentation": {}
    },
    {
        "label": "even",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "description": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "peekOfCode": "even = [2, 4, 6, 8]\nodd = [1, 3, 5, 7, 9]\nnumbers = [even, odd]\nprint(numbers)\nfor number_list in numbers:\n    print(number_list)\n    for value in number_list:\n        print(value)",
        "detail": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "documentation": {}
    },
    {
        "label": "odd",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "description": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "peekOfCode": "odd = [1, 3, 5, 7, 9]\nnumbers = [even, odd]\nprint(numbers)\nfor number_list in numbers:\n    print(number_list)\n    for value in number_list:\n        print(value)",
        "detail": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "description": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "peekOfCode": "numbers = [even, odd]\nprint(numbers)\nfor number_list in numbers:\n    print(number_list)\n    for value in number_list:\n        print(value)\nprint(\"\\n\"*6)",
        "detail": "Tim_Buchalka.python.Older.Sequences.number_lists",
        "documentation": {}
    },
    {
        "label": "pangram",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.sorting",
        "description": "Tim_Buchalka.python.Older.Sequences.sorting",
        "peekOfCode": "pangram = \"The quick brown fox jumps over the lazy dog\"\nletters = sorted(pangram)\nprint(letters)\nnumbers = [2.3, 4.5, 8.7, 3.1, 9.2, 1.6]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)\nprint(numbers)\nnumbers.sort()\nprint(numbers)\nmissing_letter = sorted(\"The quick brownfox jumped over the lazy dog\" ,",
        "detail": "Tim_Buchalka.python.Older.Sequences.sorting",
        "documentation": {}
    },
    {
        "label": "letters",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.sorting",
        "description": "Tim_Buchalka.python.Older.Sequences.sorting",
        "peekOfCode": "letters = sorted(pangram)\nprint(letters)\nnumbers = [2.3, 4.5, 8.7, 3.1, 9.2, 1.6]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)\nprint(numbers)\nnumbers.sort()\nprint(numbers)\nmissing_letter = sorted(\"The quick brownfox jumped over the lazy dog\" ,\n                        key=str.casefold)",
        "detail": "Tim_Buchalka.python.Older.Sequences.sorting",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.sorting",
        "description": "Tim_Buchalka.python.Older.Sequences.sorting",
        "peekOfCode": "numbers = [2.3, 4.5, 8.7, 3.1, 9.2, 1.6]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)\nprint(numbers)\nnumbers.sort()\nprint(numbers)\nmissing_letter = sorted(\"The quick brownfox jumped over the lazy dog\" ,\n                        key=str.casefold)\nprint(missing_letter)\nnames = [\"Graham\",",
        "detail": "Tim_Buchalka.python.Older.Sequences.sorting",
        "documentation": {}
    },
    {
        "label": "sorted_numbers",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.sorting",
        "description": "Tim_Buchalka.python.Older.Sequences.sorting",
        "peekOfCode": "sorted_numbers = sorted(numbers)\nprint(sorted_numbers)\nprint(numbers)\nnumbers.sort()\nprint(numbers)\nmissing_letter = sorted(\"The quick brownfox jumped over the lazy dog\" ,\n                        key=str.casefold)\nprint(missing_letter)\nnames = [\"Graham\",\n         \"John\",",
        "detail": "Tim_Buchalka.python.Older.Sequences.sorting",
        "documentation": {}
    },
    {
        "label": "missing_letter",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.sorting",
        "description": "Tim_Buchalka.python.Older.Sequences.sorting",
        "peekOfCode": "missing_letter = sorted(\"The quick brownfox jumped over the lazy dog\" ,\n                        key=str.casefold)\nprint(missing_letter)\nnames = [\"Graham\",\n         \"John\",\n         \"terry\",\n         \"eric\",\n         \"Terry\",\n         \"michael\"]\nnames.sort(key=str.casefold)",
        "detail": "Tim_Buchalka.python.Older.Sequences.sorting",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.sorting",
        "description": "Tim_Buchalka.python.Older.Sequences.sorting",
        "peekOfCode": "names = [\"Graham\",\n         \"John\",\n         \"terry\",\n         \"eric\",\n         \"Terry\",\n         \"michael\"]\nnames.sort(key=str.casefold)\nprint(names)\nprint(\"\\n\"*6)",
        "detail": "Tim_Buchalka.python.Older.Sequences.sorting",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.spam",
        "description": "Tim_Buchalka.python.Older.Sequences.spam",
        "peekOfCode": "menu = [\n    [\"egg\", \"bacon\"],\n    [\"egg\", \"sausage\", \"bacon\"], \n    [\"egg\", \"spam\"], \n    [\"egg\", \"bacon\", \"spam\"],\n    [\"spam\", \"bacon\", \"sausage\", \"spam\"],\n    [\"spam\", \"egg\", \"spam\", \"spam\", \"bacon\", \"spam\"],\n    [\"spam\", \"sausage\", \"spam\", \"bacon\", \"spam\", \"tomato\", \"spam\"],\n]\nfor meal in menu:",
        "detail": "Tim_Buchalka.python.Older.Sequences.spam",
        "documentation": {}
    },
    {
        "label": "panagram",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "description": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "peekOfCode": "panagram = \"\"\"The quick brown \nfox jumped\\tover\nthe lazy dog\"\"\"\nwords = panagram.split()\n# print(words)\nnumbers = \"9,223,372,036,854,775,807\"\n# print(numbers)\nnumber = []\nfor number in numbers:\n    print(number)",
        "detail": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "documentation": {}
    },
    {
        "label": "words",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "description": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "peekOfCode": "words = panagram.split()\n# print(words)\nnumbers = \"9,223,372,036,854,775,807\"\n# print(numbers)\nnumber = []\nfor number in numbers:\n    print(number)",
        "detail": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "documentation": {}
    },
    {
        "label": "numbers",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "description": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "peekOfCode": "numbers = \"9,223,372,036,854,775,807\"\n# print(numbers)\nnumber = []\nfor number in numbers:\n    print(number)",
        "detail": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "documentation": {}
    },
    {
        "label": "number",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "description": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "peekOfCode": "number = []\nfor number in numbers:\n    print(number)",
        "detail": "Tim_Buchalka.python.Older.Sequences.splitting_things",
        "documentation": {}
    },
    {
        "label": "sanitise_1",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "def sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):\n        if value >= min_valid:\n            stop = index\n            break\n    del data[:stop]\n    start = 0\n    for index in range(len(data) - 1, -1, -1):",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "sanitise_2",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "def sanitise_2(data):\n    top_index = len(data) - 1\n    for index, value in enumerate(reversed(data)):\n        if value < min_valid or value > max_valid:\n            del data[top_index - index]\ndef sanitise_3(data):\n    for index in range(len(data) - 1, -1, -1):\n        if data[index] < min_valid or data[index] > max_valid:\n            del data[index]\nif __name__ == \"__main__\":",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "sanitise_3",
        "kind": 2,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "def sanitise_3(data):\n    for index in range(len(data) - 1, -1, -1):\n        if data[index] < min_valid or data[index] > max_valid:\n            del data[index]\nif __name__ == \"__main__\":\n    print(\"Timing\")\n    x = timeit.timeit(\"sanitise_1(data_list1)\",\n                      setup=\"from __main__ import sanitise_1,\"\n                            \"data_list1\",\n                      number=1)",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "max_value",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "max_value = 1000000  # 100000000\nmin_valid = 10\nmax_valid = 97  # 99999997\ndata_list1 = list(range(max_value))\ndata_list2 = list(range(max_value))\ndata_list3 = list(range(max_value))\ndef sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "min_valid",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "min_valid = 10\nmax_valid = 97  # 99999997\ndata_list1 = list(range(max_value))\ndata_list2 = list(range(max_value))\ndata_list3 = list(range(max_value))\ndef sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):\n        if value >= min_valid:",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "max_valid",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "max_valid = 97  # 99999997\ndata_list1 = list(range(max_value))\ndata_list2 = list(range(max_value))\ndata_list3 = list(range(max_value))\ndef sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):\n        if value >= min_valid:\n            stop = index",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "data_list1",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "data_list1 = list(range(max_value))\ndata_list2 = list(range(max_value))\ndata_list3 = list(range(max_value))\ndef sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):\n        if value >= min_valid:\n            stop = index\n            break",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "data_list2",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "data_list2 = list(range(max_value))\ndata_list3 = list(range(max_value))\ndef sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):\n        if value >= min_valid:\n            stop = index\n            break\n    del data[:stop]",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "data_list3",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "description": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "peekOfCode": "data_list3 = list(range(max_value))\ndef sanitise_1(data):\n    # process the low values in the list\n    stop = 0\n    for index, value in enumerate(data):\n        if value >= min_valid:\n            stop = index\n            break\n    del data[:stop]\n    start = 0",
        "detail": "Tim_Buchalka.python.Older.Sequences.timing_delete",
        "documentation": {}
    },
    {
        "label": "albums",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.tuples_intro",
        "description": "Tim_Buchalka.python.Older.Sequences.tuples_intro",
        "peekOfCode": "albums = [(\"Welcome to my Nightmare\", \"Alice Cooper\", 1975),\n          (\"Bad Company\", \"Bad Company\", 1974),\n          (\"Nightflight\", \"Budgie\", 1981),\n          (\"More Mayhem\", \"Emilda May\", 2011),\n          (\"Ride the Lightning\", \"Metallica\", 1984.),\n          ]\nprint(len(albums))\nfor name, artist, year in albums:\n    print(\"Album: {}, Artist: {}, Year: {}\"\n          .format(name, artist, year))",
        "detail": "Tim_Buchalka.python.Older.Sequences.tuples_intro",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "description": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "peekOfCode": "a = b = c = d = e = f = 42\nprint(c)\nx, y, z =1, 2, 76\nprint(x)\nprint(y)\nprint(z)\nprint(\"Unpacking a tuple\")\ndata = 1, 2, 76 #data represents a tuple\nx, y, z = data\nprint(x)",
        "detail": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "description": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "peekOfCode": "data = 1, 2, 76 #data represents a tuple\nx, y, z = data\nprint(x)\nprint(y)\nprint(z)\nprint(\"Unpacking a list\")\ndata_list = [12, 13, 14]\n# data_list.append(15)\np, q, r = data_list\nprint(p)",
        "detail": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "documentation": {}
    },
    {
        "label": "data_list",
        "kind": 5,
        "importPath": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "description": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "peekOfCode": "data_list = [12, 13, 14]\n# data_list.append(15)\np, q, r = data_list\nprint(p)\nprint(q)\nprint(r)\nprint(\"\\n\"*3)",
        "detail": "Tim_Buchalka.python.Older.Sequences.unpacking",
        "documentation": {}
    }
]